TestCase subclass: #TestMyBeerClass	instanceVariableNames: 'allOrders correctOrders wrongOrders'	classVariableNames: ''	poolDictionaries: ''	category: 'myBeerTest'!!TestMyBeerClass methodsFor: 'running' stamp: 'Anonymous 11/30/2015 10:06'!Test! !!TestMyBeerClass methodsFor: 'running' stamp: 'Anonymous 11/30/2015 10:09'!testBeerMultiplicity	| query |		query := [ :eachOrder | (allOrders select: [:b|b ordering includes: eachOrder]) size=1 ].		self assert: (correctOrders allSatisfy: query).	self deny: (wrongOrders allSatisfy: query).! !!TestMyBeerClass methodsFor: 'initialize-release' stamp: 'Anonymous 11/30/2015 10:05'!setUp	| o b |		correctOrders := OrderedCollection new.	wrongOrders := OrderedCollection new.	allOrders := Set new.		b := (Beer new) name: 'Kohout'; unitPrice: 2.50.	o := (Order new) quantity: 3. correctOrders add: o. wrongOrders add: o. b ordering add: o.	o := (Order new) quantity: 5. correctOrders add: o. wrongOrders add: o. b ordering add: o.	allOrders add: b.		o := (Order new) quantity: 6. wrongOrders add: o. ! !