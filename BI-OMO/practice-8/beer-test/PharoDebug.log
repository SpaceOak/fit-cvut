THERE_BE_DRAGONS_HERE
InvalidGlobalName: NameOfSubclass: NameOfSubclass is not a valid class name
16 November 2015 9:27:45.601628 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

SlotClassBuilder>>validateClassName
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	Object
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


SlotClassBuilder>>name:
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	Object
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClass: (self layoutForType: type);
	slots: instanceVariablesString asSlotCollection;
	sharedVariablesFromString: classVariablesString;
	sharedPools: sharedPoolsString;
	category: category;
	environment: environment;
	copyTraitCompositionFromExistingClass;
	copyClassSlotsFromExistingClass ] in OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		name: 	#NameOfSubclass
		environment: 	a SystemDictionary(lots of globals)
		superClass: 	Object
		type: 	#normal
		instanceVariablesString: 	''
		classVariablesString: 	''
		sharedPoolsString: 	''
		category: 	'myBeerTest'
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
an OldClassBuilderAdapter

PharoClassInstaller class(AbstractClassInstaller class)>>make:
	Receiver: PharoClassInstaller
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClas...etc...
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
		superclass: 	AbstractClassInstaller
		methodDict: 	a MethodDictionary(#basicClassDefinitionChangedFrom:to:using:->Phar...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#('environment' 'instanceModification' 'methodUpdateStrategy...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoClassInstaller
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-ClassBuilder'
		traitComposition: 	{}
		localSelectors: 	nil


OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		name: 	#NameOfSubclass
		environment: 	a SystemDictionary(lots of globals)
		superClass: 	Object
		type: 	#normal
		instanceVariablesString: 	''
		classVariablesString: 	''
		sharedPoolsString: 	''
		category: 	'myBeerTest'
	Receiver's instance variables: 
an OldClassBuilderAdapter

OldClassBuilderAdapter>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		newSuper: 	Object
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'myBeerTest'
	Receiver's instance variables: 
an OldClassBuilderAdapter

Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'myBeerTest'
		class: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 381)
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(a GLMGen...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ Object
		subclass: #NameOfSubclass
		instanceVariableNames: ''
		c...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


OpalCompiler(AbstractCompiler)>>evaluate:
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		textOrString: 	'Object subclass: #NameOfSubclass
		instanceVariableNames: '''' 
...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	^ Object
		subclass: #NameOfSubclass
		instanceVariableNames: ''
		c...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


PackageTreeNautilusUI class(Behavior)>>evaluate:
	Receiver: PackageTreeNautilusUI
	Arguments and temporary variables: 
		aString: 	'Object subclass: #NameOfSubclass
		instanceVariableNames: '''' 
		cla...etc...
	Receiver's instance variables: 
		superclass: 	NautilusUI
		methodDict: 	a MethodDictionary(#addClassCategory->PackageTreeNautilusUI>>#addCl...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#packagePattern #searchWidget #packagePatternString)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil


PackageTreeNautilusUI(AbstractTool)>>addClassIn:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aPackage: 	a RPackage(myBeerTest)
		classSymbol: 	#NameOfSubclass
		systemCategory: 	#myBeerTest
		proposedSuperclass: 	Object
		classDefinition: 	'Object subclass: #NameOfSubclass
		instanceVariableNames: '''...etc...
		newClass: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>addClassIn:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aPackage: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>addClass
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		package: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


[ target addClass ] in AbstractNautilusUI class>>classesFixMenu:
	Receiver: AbstractNautilusUI
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		superclass: 	AbstractTool
		methodDict: 	a MethodDictionary(size 381)
		format: 	166
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #window #hierarchyClass #cachedHierarchy #sourceTex...etc...
		organization: 	a ClassOrganization
		subclasses: 	{NautilusUI}
		name: 	#AbstractNautilusUI
		classPool: 	a Dictionary(#ClassesIconsCache->a WeakIdentityKeyDictionary(ZdcSecu...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ target addClass ]
	Arguments and temporary variables: 
		anArg: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		outerContext: 	AbstractNautilusUI class>>classesFixMenu:
		startpc: 	251
		numArgs: 	0


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(411041792)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(605@479) mouseUp 230360 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(592.0@470.0) corner: (716.0@487.0)
		owner: 	a MenuMorph(669515776)
		submorphs: 	#()
		fullBounds: 	(592.0@470.0) corner: (716.0@487.0)
		color: 	Color black
		extension: 	a MorphExtension (433848320)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(411041792)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(605@479) mouseUp 230360 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(592.0@470.0) corner: (716.0@487.0)
		owner: 	a MenuMorph(669515776)
		submorphs: 	#()
		fullBounds: 	(592.0@470.0) corner: (716.0@487.0)
		color: 	Color black
		extension: 	a MorphExtension (433848320)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(411041792)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(605@479) mouseUp 230360 nil]
	Receiver's instance variables: 
		bounds: 	(592.0@470.0) corner: (716.0@487.0)
		owner: 	a MenuMorph(669515776)
		submorphs: 	#()
		fullBounds: 	(592.0@470.0) corner: (716.0@487.0)
		color: 	Color black
		extension: 	a MorphExtension (433848320)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(411041792)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(605@479) mouseUp 230360 nil]
	Receiver's instance variables: 
		bounds: 	(592.0@470.0) corner: (716.0@487.0)
		owner: 	a MenuMorph(669515776)
		submorphs: 	#()
		fullBounds: 	(592.0@470.0) corner: (716.0@487.0)
		color: 	Color black
		extension: 	a MorphExtension (433848320)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MouseButtonEvent>>sentTo:
	Receiver: [(605@479) mouseUp 230360 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(411041792)'Add Class...'
	Receiver's instance variables: 
		timeStamp: 	230360
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(605@479)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(411041792)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(605@479) mouseUp 230360 nil]
	Receiver's instance variables: 
		bounds: 	(592.0@470.0) corner: (716.0@487.0)
		owner: 	a MenuMorph(669515776)
		submorphs: 	#()
		fullBounds: 	(592.0@470.0) corner: (716.0@487.0)
		color: 	Color black
		extension: 	a MorphExtension (433848320)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(605@479) mouseUp 230360 nil]
		aMorph: 	a ToggleMenuItemMorph(411041792)'Add Class...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(605@479) mouseUp 230360 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(605@479) mouseUp 230360 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	230360
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(605@479)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(605@479) mouseUp 230360 nil]
		aMorph: 	a ToggleMenuItemMorph(411041792)'Add Class...'
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(605@479) mouseUp 230360 nil]
		aMorph: 	a ToggleMenuItemMorph(411041792)'Add Class...'
	Receiver's instance variables: 
		morph: 	nil


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(411041792)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(605@479) mouseUp 230360 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(592.0@470.0) corner: (716.0@487.0)
		owner: 	a MenuMorph(669515776)
		submorphs: 	#()
		fullBounds: 	(592.0@470.0) corner: (716.0@487.0)
		color: 	Color black
		extension: 	a MorphExtension (433848320)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(605@479) mouseUp 230360 nil]
		aMorph: 	a MenuMorph(669515776)
		localEvt: 	[(605@479) mouseUp 230360 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(411041792)'Add Class...'
		morphs: 	an Array(a ToggleMenuItemMorph(377487360)'Find Method...' a ToggleMenuI...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(605@479) mouseUp 230360 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(605@479) mouseUp 230360 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	230360
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(605@479)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(605@479) mouseUp 230360 nil]
		aMorph: 	a MenuMorph(669515776)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(605@479) mouseUp 230360 nil]
		aMorph: 	a MenuMorph(669515776)
	Receiver's instance variables: 
		morph: 	nil


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(669515776)
	Arguments and temporary variables: 
		anEvent: 	[(605@479) mouseUp 230360 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(587.0@429.0) corner: (721.0@531.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(377487360)'Find Method...' a ToggleMe...etc...
		fullBounds: 	(587.0@429.0) corner: (721.0@531.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (706478080) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a ClassWidget
		selectedItem: 	a ToggleMenuItemMorph(411041792)'Add Class...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(377487360)'Find Method......etc...
		basicColor: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(669515776)
	Arguments and temporary variables: 
		anEvent: 	[(605@479) mouseUp 230360 nil]
	Receiver's instance variables: 
		bounds: 	(587.0@429.0) corner: (721.0@531.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(377487360)'Find Method...' a ToggleMe...etc...
		fullBounds: 	(587.0@429.0) corner: (721.0@531.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (706478080) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a ClassWidget
		selectedItem: 	a ToggleMenuItemMorph(411041792)'Add Class...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(377487360)'Find Method......etc...
		basicColor: 	nil



--- The full stack ---
SlotClassBuilder>>validateClassName
SlotClassBuilder>>name:
[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClass: (self layoutForType: type);
	slots: instanceVariablesString asSlotCollection;
	sharedVariablesFromString: classVariablesString;
	sharedPools: sharedPoolsString;
	category: category;
	environment: environment;
	copyTraitCompositionFromExistingClass;
	copyClassSlotsFromExistingClass ] in OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
PharoClassInstaller class(AbstractClassInstaller class)>>make:
OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
OldClassBuilderAdapter>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
OpalCompiler(AbstractCompiler)>>evaluate:
PackageTreeNautilusUI class(Behavior)>>evaluate:
PackageTreeNautilusUI(AbstractTool)>>addClassIn:
PackageTreeNautilusUI>>addClassIn:
PackageTreeNautilusUI(AbstractNautilusUI)>>addClass
[ target addClass ] in AbstractNautilusUI class>>classesFixMenu:
BlockClosure>>cull:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
InvalidGlobalName: NameOfSubclass: NameOfSubclass is not a valid class name
16 November 2015 9:34:30.715582 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

SlotClassBuilder>>validateClassName
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	TestCase
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


SlotClassBuilder>>name:
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	TestCase
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClass: (self layoutForType: type);
	slots: instanceVariablesString asSlotCollection;
	sharedVariablesFromString: classVariablesString;
	sharedPools: sharedPoolsString;
	category: category;
	environment: environment;
	copyTraitCompositionFromExistingClass;
	copyClassSlotsFromExistingClass ] in OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		name: 	#NameOfSubclass
		environment: 	a SystemDictionary(lots of globals)
		superClass: 	TestCase
		type: 	#normal
		instanceVariablesString: 	''
		classVariablesString: 	''
		sharedPoolsString: 	''
		category: 	'myBeerTest'
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
an OldClassBuilderAdapter

PharoClassInstaller class(AbstractClassInstaller class)>>make:
	Receiver: PharoClassInstaller
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClas...etc...
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
		superclass: 	AbstractClassInstaller
		methodDict: 	a MethodDictionary(#basicClassDefinitionChangedFrom:to:using:->Phar...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#('environment' 'instanceModification' 'methodUpdateStrategy...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoClassInstaller
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-ClassBuilder'
		traitComposition: 	{}
		localSelectors: 	nil


OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		name: 	#NameOfSubclass
		environment: 	a SystemDictionary(lots of globals)
		superClass: 	TestCase
		type: 	#normal
		instanceVariablesString: 	''
		classVariablesString: 	''
		sharedPoolsString: 	''
		category: 	'myBeerTest'
	Receiver's instance variables: 
an OldClassBuilderAdapter

OldClassBuilderAdapter>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		newSuper: 	TestCase
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'myBeerTest'
	Receiver's instance variables: 
an OldClassBuilderAdapter

TestCase class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: TestCase
	Arguments and temporary variables: 
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'myBeerTest'
		class: 	nil
	Receiver's instance variables: 
		superclass: 	TestAsserter
		methodDict: 	a MethodDictionary(#addDependentToHierachy:->TestCase>>#addDependen...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#testSelector #expectedFails)
		organization: 	a ClassOrganization
		subclasses: 	{Base64MimeConverterTest. BecomeTest. ClassTestCase. ExceptionTests...etc...
		name: 	#TestCase
		classPool: 	a Dictionary(#Announcers->a Dictionary() #HistoryAnnouncer->an Annou...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'SUnit-Core-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestCase
		subclass: #NameOfSubclass
		instanceVariableNames: ''
	...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


OpalCompiler(AbstractCompiler)>>evaluate:
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		textOrString: 	'TestCase subclass: #NameOfSubclass
		instanceVariableNames: ''''...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestCase
		subclass: #NameOfSubclass
		instanceVariableNames: ''
	...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


PackageTreeNautilusUI class(Behavior)>>evaluate:
	Receiver: PackageTreeNautilusUI
	Arguments and temporary variables: 
		aString: 	'TestCase subclass: #NameOfSubclass
		instanceVariableNames: '''' 
		c...etc...
	Receiver's instance variables: 
		superclass: 	NautilusUI
		methodDict: 	a MethodDictionary(#addClassCategory->PackageTreeNautilusUI>>#addCl...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#packagePattern #searchWidget #packagePatternString)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil


PackageTreeNautilusUI(AbstractTool)>>addClassIn:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aPackage: 	a RPackage(myBeerTest)
		classSymbol: 	#NameOfSubclass
		systemCategory: 	#myBeerTest
		proposedSuperclass: 	Object
		classDefinition: 	'TestCase subclass: #NameOfSubclass
		instanceVariableNames: '...etc...
		newClass: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>addClassIn:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aPackage: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>addClass
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		package: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


[ target addClass ] in AbstractNautilusUI class>>classesFixMenu:
	Receiver: AbstractNautilusUI
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		superclass: 	AbstractTool
		methodDict: 	a MethodDictionary(size 381)
		format: 	166
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #window #hierarchyClass #cachedHierarchy #sourceTex...etc...
		organization: 	a ClassOrganization
		subclasses: 	{NautilusUI}
		name: 	#AbstractNautilusUI
		classPool: 	a Dictionary(#ClassesIconsCache->a WeakIdentityKeyDictionary(Abstrac...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ target addClass ]
	Arguments and temporary variables: 
		anArg: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		outerContext: 	AbstractNautilusUI class>>classesFixMenu:
		startpc: 	251
		numArgs: 	0


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(165675008)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(287@284) mouseUp 631048 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(258.0@270.0) corner: (382.0@287.0)
		owner: 	a MenuMorph(717750272)
		submorphs: 	#()
		fullBounds: 	(258.0@270.0) corner: (382.0@287.0)
		color: 	Color black
		extension: 	a MorphExtension (188481536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(165675008)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(287@284) mouseUp 631048 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(258.0@270.0) corner: (382.0@287.0)
		owner: 	a MenuMorph(717750272)
		submorphs: 	#()
		fullBounds: 	(258.0@270.0) corner: (382.0@287.0)
		color: 	Color black
		extension: 	a MorphExtension (188481536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(165675008)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(287@284) mouseUp 631048 nil]
	Receiver's instance variables: 
		bounds: 	(258.0@270.0) corner: (382.0@287.0)
		owner: 	a MenuMorph(717750272)
		submorphs: 	#()
		fullBounds: 	(258.0@270.0) corner: (382.0@287.0)
		color: 	Color black
		extension: 	a MorphExtension (188481536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(165675008)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(287@284) mouseUp 631048 nil]
	Receiver's instance variables: 
		bounds: 	(258.0@270.0) corner: (382.0@287.0)
		owner: 	a MenuMorph(717750272)
		submorphs: 	#()
		fullBounds: 	(258.0@270.0) corner: (382.0@287.0)
		color: 	Color black
		extension: 	a MorphExtension (188481536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MouseButtonEvent>>sentTo:
	Receiver: [(287@284) mouseUp 631048 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(165675008)'Add Class...'
	Receiver's instance variables: 
		timeStamp: 	631048
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(287@284)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(165675008)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(287@284) mouseUp 631048 nil]
	Receiver's instance variables: 
		bounds: 	(258.0@270.0) corner: (382.0@287.0)
		owner: 	a MenuMorph(717750272)
		submorphs: 	#()
		fullBounds: 	(258.0@270.0) corner: (382.0@287.0)
		color: 	Color black
		extension: 	a MorphExtension (188481536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(287@284) mouseUp 631048 nil]
		aMorph: 	a ToggleMenuItemMorph(165675008)'Add Class...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(287@284) mouseUp 631048 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(287@284) mouseUp 631048 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	631048
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(287@284)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(287@284) mouseUp 631048 nil]
		aMorph: 	a ToggleMenuItemMorph(165675008)'Add Class...'
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(287@284) mouseUp 631048 nil]
		aMorph: 	a ToggleMenuItemMorph(165675008)'Add Class...'
	Receiver's instance variables: 
		morph: 	nil


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(165675008)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(287@284) mouseUp 631048 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(258.0@270.0) corner: (382.0@287.0)
		owner: 	a MenuMorph(717750272)
		submorphs: 	#()
		fullBounds: 	(258.0@270.0) corner: (382.0@287.0)
		color: 	Color black
		extension: 	a MorphExtension (188481536)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(287@284) mouseUp 631048 nil]
		aMorph: 	a MenuMorph(717750272)
		localEvt: 	[(287@284) mouseUp 631048 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(165675008)'Add Class...'
		morphs: 	an Array(a ToggleMenuItemMorph(132120576)'Find Method...' a ToggleMenuI...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(287@284) mouseUp 631048 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(287@284) mouseUp 631048 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	631048
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(287@284)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(287@284) mouseUp 631048 nil]
		aMorph: 	a MenuMorph(717750272)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(287@284) mouseUp 631048 nil]
		aMorph: 	a MenuMorph(717750272)
	Receiver's instance variables: 
		morph: 	nil


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(717750272)
	Arguments and temporary variables: 
		anEvent: 	[(287@284) mouseUp 631048 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(253.0@229.0) corner: (387.0@331.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(132120576)'Find Method...' a ToggleMe...etc...
		fullBounds: 	(253.0@229.0) corner: (387.0@331.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (754712576) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a ClassWidget
		selectedItem: 	a ToggleMenuItemMorph(165675008)'Add Class...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(132120576)'Find Method......etc...
		basicColor: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(717750272)
	Arguments and temporary variables: 
		anEvent: 	[(287@284) mouseUp 631048 nil]
	Receiver's instance variables: 
		bounds: 	(253.0@229.0) corner: (387.0@331.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(132120576)'Find Method...' a ToggleMe...etc...
		fullBounds: 	(253.0@229.0) corner: (387.0@331.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (754712576) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a ClassWidget
		selectedItem: 	a ToggleMenuItemMorph(165675008)'Add Class...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(132120576)'Find Method......etc...
		basicColor: 	nil



--- The full stack ---
SlotClassBuilder>>validateClassName
SlotClassBuilder>>name:
[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClass: (self layoutForType: type);
	slots: instanceVariablesString asSlotCollection;
	sharedVariablesFromString: classVariablesString;
	sharedPools: sharedPoolsString;
	category: category;
	environment: environment;
	copyTraitCompositionFromExistingClass;
	copyClassSlotsFromExistingClass ] in OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
PharoClassInstaller class(AbstractClassInstaller class)>>make:
OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
OldClassBuilderAdapter>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
TestCase class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
OpalCompiler(AbstractCompiler)>>evaluate:
PackageTreeNautilusUI class(Behavior)>>evaluate:
PackageTreeNautilusUI(AbstractTool)>>addClassIn:
PackageTreeNautilusUI>>addClassIn:
PackageTreeNautilusUI(AbstractNautilusUI)>>addClass
[ target addClass ] in AbstractNautilusUI class>>classesFixMenu:
BlockClosure>>cull:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
InvalidGlobalName: NameOfSubclass: NameOfSubclass is not a valid class name
16 November 2015 9:35:15.835577 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

SlotClassBuilder>>validateClassName
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	TestCase
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


SlotClassBuilder>>name:
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	TestCase
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClass: (self layoutForType: type);
	slots: instanceVariablesString asSlotCollection;
	sharedVariablesFromString: classVariablesString;
	sharedPools: sharedPoolsString;
	category: category;
	environment: environment;
	copyTraitCompositionFromExistingClass;
	copyClassSlotsFromExistingClass ] in OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		name: 	#NameOfSubclass
		environment: 	a SystemDictionary(lots of globals)
		superClass: 	TestCase
		type: 	#normal
		instanceVariablesString: 	''
		classVariablesString: 	''
		sharedPoolsString: 	''
		category: 	'myBeerTest'
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
an OldClassBuilderAdapter

PharoClassInstaller class(AbstractClassInstaller class)>>make:
	Receiver: PharoClassInstaller
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClas...etc...
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
		superclass: 	AbstractClassInstaller
		methodDict: 	a MethodDictionary(#basicClassDefinitionChangedFrom:to:using:->Phar...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#('environment' 'instanceModification' 'methodUpdateStrategy...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoClassInstaller
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-ClassBuilder'
		traitComposition: 	{}
		localSelectors: 	nil


OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		name: 	#NameOfSubclass
		environment: 	a SystemDictionary(lots of globals)
		superClass: 	TestCase
		type: 	#normal
		instanceVariablesString: 	''
		classVariablesString: 	''
		sharedPoolsString: 	''
		category: 	'myBeerTest'
	Receiver's instance variables: 
an OldClassBuilderAdapter

OldClassBuilderAdapter>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		newSuper: 	TestCase
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'myBeerTest'
	Receiver's instance variables: 
an OldClassBuilderAdapter

TestCase class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: TestCase
	Arguments and temporary variables: 
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'myBeerTest'
		class: 	nil
	Receiver's instance variables: 
		superclass: 	TestAsserter
		methodDict: 	a MethodDictionary(#addDependentToHierachy:->TestCase>>#addDependen...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#testSelector #expectedFails)
		organization: 	a ClassOrganization
		subclasses: 	{Base64MimeConverterTest. BecomeTest. ClassTestCase. ExceptionTests...etc...
		name: 	#TestCase
		classPool: 	a Dictionary(#Announcers->a Dictionary() #HistoryAnnouncer->an Annou...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'SUnit-Core-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	nil


TestCase class(Class)>>subclass:instanceVariableNames:classVariableNames:category:
	Receiver: TestCase
	Arguments and temporary variables: 
		aSubclassSymbol: 	#NameOfSubclass
		instVarNames: 	''
		classVarNames: 	''
		aCategorySymbol: 	'myBeerTest'
	Receiver's instance variables: 
		superclass: 	TestAsserter
		methodDict: 	a MethodDictionary(#addDependentToHierachy:->TestCase>>#addDependen...etc...
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#(#testSelector #expectedFails)
		organization: 	a ClassOrganization
		subclasses: 	{Base64MimeConverterTest. BecomeTest. ClassTestCase. ExceptionTests...etc...
		name: 	#TestCase
		classPool: 	a Dictionary(#Announcers->a Dictionary() #HistoryAnnouncer->an Annou...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'SUnit-Core-Kernel'
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ TestCase
		subclass: #NameOfSubclass
		instanceVariableNames: ''
	...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


PackageTreeNautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aString: 	'TestCase subclass: #NameOfSubclass
	instanceVariableNames: ''''
	clas...etc...
		aController: 	a PluggableTextMorphWithLimits(46137344)
		aClass: 	nil
		oldClass: 	nil
		class: 	nil
		newClassName: 	'NameOfSubclass'
		defTokens: 	an OrderedCollection('TestCase' 'subclass:' '#NameOfSubclass' 'insta...etc...
		keywdIx: 	2
		envt: 	a SystemDictionary(lots of globals)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aString: 	'TestCase subclass: #NameOfSubclass
	instanceVariableNames: ''''
	clas...etc...
		aController: 	a PluggableTextMorphWithLimits(46137344)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


ClassDefinitionAcceptor>>accept:notifying:
	Receiver: a ClassDefinitionAcceptor
	Arguments and temporary variables: 
		aText: 	'TestCase subclass: #NameOfSubclass
	instanceVariableNames: ''''
	classV...etc...
		aController: 	a PluggableTextMorphWithLimits(46137344)
	Receiver's instance variables: 
		model: 	a PackageTreeNautilusUI


PackageTreeNautilusUI(NautilusUI)>>compileSource:notifying:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aText: 	a Text for 'TestCase subclass: #NameOfSubclass
	instanceVariableNames: '...etc...
		aController: 	a PluggableTextMorphWithLimits(46137344)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


[ 
^ setTextSelector isNil
	or: [ 
		setTextSelector numArgs = 2
			ifTrue: [ model perform: setTextSelector with: acceptedText with: self ]
			ifFalse: [ model perform: setTextSelector with: acceptedText ] ] ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(46137344)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'TestCase subclass: #NameOfSubclass
	instanceVariableN...etc...
	Receiver's instance variables: 
		bounds: 	(-6.0@387.0) corner: (810.0@664.0)
		owner: 	a MultipleMethodsEditor(515112960)
		submorphs: 	an Array(an AlphaImageMorph(170131456) a TransformMorph(582221824))
		fullBounds: 	(-6@387) corner: (810@664)
		color: 	Color white
		extension: 	a MorphExtension (538968064) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(88866816)
		scroller: 	a TransformMorph(582221824)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(909115392)
		textMorph: 	a TextMorphForEditView(996147200)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(10 to: 9)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(170131456)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


BlockClosure>>ensure:
	Receiver: [ 
^ setTextSelector isNil
	or: [ 
		setTextSelector numArgs = 2
			ifTrue: [ model perfor...etc...
	Arguments and temporary variables: 
		aBlock: 	[ unstyledAcceptText := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInMod...etc...
		startpc: 	64
		numArgs: 	0


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
	Receiver: a PluggableTextMorphWithLimits(46137344)
	Arguments and temporary variables: 
		acceptedText: 	a Text for 'TestCase subclass: #NameOfSubclass
	instanceVariableN...etc...
	Receiver's instance variables: 
		bounds: 	(-6.0@387.0) corner: (810.0@664.0)
		owner: 	a MultipleMethodsEditor(515112960)
		submorphs: 	an Array(an AlphaImageMorph(170131456) a TransformMorph(582221824))
		fullBounds: 	(-6@387) corner: (810@664)
		color: 	Color white
		extension: 	a MorphExtension (538968064) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(88866816)
		scroller: 	a TransformMorph(582221824)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(909115392)
		textMorph: 	a TextMorphForEditView(996147200)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(10 to: 9)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(170131456)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(46137344)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(10 to: 9)
		saveScrollerOffset: 	(-3.0@0.0)
	Receiver's instance variables: 
		bounds: 	(-6.0@387.0) corner: (810.0@664.0)
		owner: 	a MultipleMethodsEditor(515112960)
		submorphs: 	an Array(an AlphaImageMorph(170131456) a TransformMorph(582221824))
		fullBounds: 	(-6@387) corner: (810@664)
		color: 	Color white
		extension: 	a MorphExtension (538968064) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(88866816)
		scroller: 	a TransformMorph(582221824)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(909115392)
		textMorph: 	a TextMorphForEditView(996147200)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(10 to: 9)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(170131456)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits>>acceptBasic
	Receiver: a PluggableTextMorphWithLimits(46137344)
	Arguments and temporary variables: 
		saveSelection: 	nil
		saveScrollerOffset: 	nil
	Receiver's instance variables: 
		bounds: 	(-6.0@387.0) corner: (810.0@664.0)
		owner: 	a MultipleMethodsEditor(515112960)
		submorphs: 	an Array(an AlphaImageMorph(170131456) a TransformMorph(582221824))
		fullBounds: 	(-6@387) corner: (810@664)
		color: 	Color white
		extension: 	a MorphExtension (538968064) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(88866816)
		scroller: 	a TransformMorph(582221824)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(909115392)
		textMorph: 	a TextMorphForEditView(996147200)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(10 to: 9)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(170131456)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
	Receiver: a PluggableTextMorphWithLimits(46137344)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(-6.0@387.0) corner: (810.0@664.0)
		owner: 	a MultipleMethodsEditor(515112960)
		submorphs: 	an Array(an AlphaImageMorph(170131456) a TransformMorph(582221824))
		fullBounds: 	(-6@387) corner: (810@664)
		color: 	Color white
		extension: 	a MorphExtension (538968064) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(88866816)
		scroller: 	a TransformMorph(582221824)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(909115392)
		textMorph: 	a TextMorphForEditView(996147200)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(10 to: 9)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(170131456)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>promptForCancel
	Receiver: a PluggableTextMorphWithLimits(46137344)
	Arguments and temporary variables: 
		choice: 	true
	Receiver's instance variables: 
		bounds: 	(-6.0@387.0) corner: (810.0@664.0)
		owner: 	a MultipleMethodsEditor(515112960)
		submorphs: 	an Array(an AlphaImageMorph(170131456) a TransformMorph(582221824))
		fullBounds: 	(-6@387) corner: (810@664)
		color: 	Color white
		extension: 	a MorphExtension (538968064) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(88866816)
		scroller: 	a TransformMorph(582221824)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(909115392)
		textMorph: 	a TextMorphForEditView(996147200)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(10 to: 9)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(170131456)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PluggableTextMorphWithLimits(PluggableTextMorph)>>update:
	Receiver: a PluggableTextMorphWithLimits(46137344)
	Arguments and temporary variables: 
		aSymbol: 	#wantToChange
	Receiver's instance variables: 
		bounds: 	(-6.0@387.0) corner: (810.0@664.0)
		owner: 	a MultipleMethodsEditor(515112960)
		submorphs: 	an Array(an AlphaImageMorph(170131456) a TransformMorph(582221824))
		fullBounds: 	(-6@387) corner: (810@664)
		color: 	Color white
		extension: 	a MorphExtension (538968064) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a PackageTreeNautilusUI
		scrollBar: 	a ScrollBar(88866816)
		scroller: 	a TransformMorph(582221824)
		getMenuSelector: 	#sourceCodeMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(909115392)
		textMorph: 	a TextMorphForEditView(996147200)
		getTextSelector: 	#sourceCodeFrom:
		setTextSelector: 	#compileSource:notifying:
		getSelectionSelector: 	#contentsSelectionFrom:
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(10 to: 9)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		alertLimit: 	nil
		locked: 	false
		warningLimit: 	-1
		method: 	nil
		lockIcon: 	an AlphaImageMorph(170131456)
		canLockChangeSelector: 	#canChangeLockFor:
		lockSelector: 	#lockTextArea:from:


PackageTreeNautilusUI(AbstractNautilusUI)>>okToChange
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


ClassWidget>>okToChange
	Receiver: a ClassWidget
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableIconListMorph(372506624))
		model: 	a PackageTreeNautilusUI
		classesList: 	a PluggableIconListMorph(372506624)
		classesSelection: 	a Dictionary(Beer->false )
		classesListElements: 	{Beer}
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


PluggableIconListMorph(PluggableListMorph)>>mouseDownOnMultiple:forRow:
	Receiver: a PluggableIconListMorph(372506624)
	Arguments and temporary variables: 
		event: 	[(300@263) mouseDown red 683338 nil]
		row: 	1
		anInteger: 	nil
		oldIndex: 	nil
		oldVal: 	nil
		valueKeeper: 	nil
	Receiver's instance variables: 
		bounds: 	(206.0@97.0) corner: (414.0@354.0)
		owner: 	a PanelMorph(282591232)
		submorphs: 	an Array(a TransformMorph(874512384))
		fullBounds: 	(206@97) corner: (414@354)
		color: 	Color white
		extension: 	a MorphExtension (867434496) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a ClassWidget
		scrollBar: 	a ScrollBar(417333248)
		scroller: 	a TransformMorph(874512384)
		getMenuSelector: 	#classesMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(127664128)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	#classListSize
		getListElementSelector: 	#getClassItem:
		getIndexSelector: 	#selectedClassIndex
		setIndexSelector: 	#selectedClassIndex:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	246562
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyMorphListMorph(845152256)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil
		wrapSelector: 	#classWrapper:
		searchedElement: 	nil
		multipleSelection: 	true
		dragOnOrOff: 	nil
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		resetListSelector: 	#resetClassSelection
		keystrokeSelector: 	#keyPressedOnList:shifted:
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	1
		canMove: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil
		getIconSelector: 	#classIconFor:


PluggableIconListMorph(PluggableListMorph)>>mouseDown:
	Receiver: a PluggableIconListMorph(372506624)
	Arguments and temporary variables: 
		evt: 	[(300@263) mouseDown red 683338 nil]
		selectors: 	nil
		row: 	1
	Receiver's instance variables: 
		bounds: 	(206.0@97.0) corner: (414.0@354.0)
		owner: 	a PanelMorph(282591232)
		submorphs: 	an Array(a TransformMorph(874512384))
		fullBounds: 	(206@97) corner: (414@354)
		color: 	Color white
		extension: 	a MorphExtension (867434496) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a ClassWidget
		scrollBar: 	a ScrollBar(417333248)
		scroller: 	a TransformMorph(874512384)
		getMenuSelector: 	#classesMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(127664128)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	#classListSize
		getListElementSelector: 	#getClassItem:
		getIndexSelector: 	#selectedClassIndex
		setIndexSelector: 	#selectedClassIndex:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	246562
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyMorphListMorph(845152256)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil
		wrapSelector: 	#classWrapper:
		searchedElement: 	nil
		multipleSelection: 	true
		dragOnOrOff: 	nil
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		resetListSelector: 	#resetClassSelection
		keystrokeSelector: 	#keyPressedOnList:shifted:
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	1
		canMove: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil
		getIconSelector: 	#classIconFor:


PluggableIconListMorph(Morph)>>handleMouseDown:
	Receiver: a PluggableIconListMorph(372506624)
	Arguments and temporary variables: 
		anEvent: 	[(300@263) mouseDown red 683338 nil]
	Receiver's instance variables: 
		bounds: 	(206.0@97.0) corner: (414.0@354.0)
		owner: 	a PanelMorph(282591232)
		submorphs: 	an Array(a TransformMorph(874512384))
		fullBounds: 	(206@97) corner: (414@354)
		color: 	Color white
		extension: 	a MorphExtension (867434496) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a ClassWidget
		scrollBar: 	a ScrollBar(417333248)
		scroller: 	a TransformMorph(874512384)
		getMenuSelector: 	#classesMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(127664128)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	#classListSize
		getListElementSelector: 	#getClassItem:
		getIndexSelector: 	#selectedClassIndex
		setIndexSelector: 	#selectedClassIndex:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	246562
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyMorphListMorph(845152256)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil
		wrapSelector: 	#classWrapper:
		searchedElement: 	nil
		multipleSelection: 	true
		dragOnOrOff: 	nil
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		resetListSelector: 	#resetClassSelection
		keystrokeSelector: 	#keyPressedOnList:shifted:
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	1
		canMove: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil
		getIconSelector: 	#classIconFor:


MouseButtonEvent>>sentTo:
	Receiver: [(300@263) mouseDown red 683338 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableIconListMorph(372506624)
	Receiver's instance variables: 
		timeStamp: 	683338
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(300@263)
		handler: 	a PluggableIconListMorph(372506624)
		wasHandled: 	true
		whichButton: 	4


PluggableIconListMorph(Morph)>>handleEvent:
	Receiver: a PluggableIconListMorph(372506624)
	Arguments and temporary variables: 
		anEvent: 	[(300@263) mouseDown red 683338 nil]
	Receiver's instance variables: 
		bounds: 	(206.0@97.0) corner: (414.0@354.0)
		owner: 	a PanelMorph(282591232)
		submorphs: 	an Array(a TransformMorph(874512384))
		fullBounds: 	(206@97) corner: (414@354)
		color: 	Color white
		extension: 	a MorphExtension (867434496) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a ClassWidget
		scrollBar: 	a ScrollBar(417333248)
		scroller: 	a TransformMorph(874512384)
		getMenuSelector: 	#classesMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(127664128)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	#classListSize
		getListElementSelector: 	#getClassItem:
		getIndexSelector: 	#selectedClassIndex
		setIndexSelector: 	#selectedClassIndex:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	246562
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyMorphListMorph(845152256)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil
		wrapSelector: 	#classWrapper:
		searchedElement: 	nil
		multipleSelection: 	true
		dragOnOrOff: 	nil
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		resetListSelector: 	#resetClassSelection
		keystrokeSelector: 	#keyPressedOnList:shifted:
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	1
		canMove: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil
		getIconSelector: 	#classIconFor:


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(300@263) mouseDown red 683338 nil]
		aMorph: 	a PluggableIconListMorph(372506624)
		globalPt: 	(300@263)
		localEvt: 	[(300@263) mouseDown red 683338 nil]
		index: 	2
		child: 	a TransformMorph(874512384)
		morphs: 	an Array(a TransformMorph(874512384))
		handler: 	a PluggableIconListMorph(372506624)
		inside: 	nil
		lastHandler: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(300@263) mouseDown red 683338 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(300@263) mouseDown red 683338 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	683338
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(300@263)
		handler: 	a PluggableIconListMorph(372506624)
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(300@263) mouseDown red 683338 nil]
		aMorph: 	a PluggableIconListMorph(372506624)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(300@263) mouseDown red 683338 nil]
		aMorph: 	a PluggableIconListMorph(372506624)
	Receiver's instance variables: 
		morph: 	nil


PluggableIconListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableIconListMorph(372506624)
	Arguments and temporary variables: 
		anEvent: 	[(300@263) mouseDown red 683338 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(206.0@97.0) corner: (414.0@354.0)
		owner: 	a PanelMorph(282591232)
		submorphs: 	an Array(a TransformMorph(874512384))
		fullBounds: 	(206@97) corner: (414@354)
		color: 	Color white
		extension: 	a MorphExtension (867434496) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		model: 	a ClassWidget
		scrollBar: 	a ScrollBar(417333248)
		scroller: 	a TransformMorph(874512384)
		getMenuSelector: 	#classesMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(127664128)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	#classListSize
		getListElementSelector: 	#getClassItem:
		getIndexSelector: 	#selectedClassIndex
		setIndexSelector: 	#selectedClassIndex:
		keystrokeActionSelector: 	nil
		autoDeselect: 	true
		lastKeystrokeTime: 	246562
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyMorphListMorph(845152256)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	#dropInClass:inARow:
		wantsDropSelector: 	nil
		wrapSelector: 	#classWrapper:
		searchedElement: 	nil
		multipleSelection: 	true
		dragOnOrOff: 	nil
		setSelectionListSelector: 	#classSelectionAt:put:
		getSelectionListSelector: 	#classSelectionAt:
		resetListSelector: 	#resetClassSelection
		keystrokeSelector: 	#keyPressedOnList:shifted:
		backgroundColoringBlockOrSelector: 	nil
		separatorBlockOrSelector: 	nil
		separatorSize: 	nil
		separatorColor: 	nil
		lastNonZeroIndex: 	1
		canMove: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		selectionColorToUse: 	nil
		enabled: 	nil
		getEnabledSelector: 	nil
		getIconSelector: 	#classIconFor:


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(300@263) mouseDown red 683338 nil]
		aMorph: 	a PanelMorph(282591232)
		globalPt: 	(300@263)
		localEvt: 	[(300@263) mouseDown red 683338 nil]
		index: 	2
		child: 	a PluggableIconListMorph(372506624)
		morphs: 	an Array(a PanelMorph(1041235968) a PluggableIconListMorph(372506624))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(300@263) mouseDown red 683338 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(300@263) mouseDown red 683338 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	683338
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(300@263)
		handler: 	a WorldMorph(511705088) [world]
		wasHandled: 	false
		whichButton: 	4



--- The full stack ---
SlotClassBuilder>>validateClassName
SlotClassBuilder>>name:
[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClass: (self layoutForType: type);
	slots: instanceVariablesString asSlotCollection;
	sharedVariablesFromString: classVariablesString;
	sharedPools: sharedPoolsString;
	category: category;
	environment: environment;
	copyTraitCompositionFromExistingClass;
	copyClassSlotsFromExistingClass ] in OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
PharoClassInstaller class(AbstractClassInstaller class)>>make:
OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
OldClassBuilderAdapter>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
TestCase class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
TestCase class(Class)>>subclass:instanceVariableNames:classVariableNames:category:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
PackageTreeNautilusUI(AbstractTool)>>compileANewClassFrom:notifying:startingFrom:
PackageTreeNautilusUI(AbstractNautilusUI)>>compileAClassFrom:notifying:
ClassDefinitionAcceptor>>accept:notifying:
PackageTreeNautilusUI(NautilusUI)>>compileSource:notifying:
[ 
^ setTextSelector isNil
	or: [ 
		setTextSelector numArgs = 2
			ifTrue: [ model perform: setTextSelector with: acceptedText with: self ]
			ifFalse: [ model perform: setTextSelector with: acceptedText ] ] ] in PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
BlockClosure>>ensure:
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptTextInModel
PluggableTextMorphWithLimits(PluggableTextMorph)>>acceptBasic
PluggableTextMorphWithLimits>>acceptBasic
PluggableTextMorphWithLimits(PluggableTextMorph)>>accept
PluggableTextMorphWithLimits(PluggableTextMorph)>>promptForCancel
PluggableTextMorphWithLimits(PluggableTextMorph)>>update:
PackageTreeNautilusUI(AbstractNautilusUI)>>okToChange
ClassWidget>>okToChange
PluggableIconListMorph(PluggableListMorph)>>mouseDownOnMultiple:forRow:
PluggableIconListMorph(PluggableListMorph)>>mouseDown:
PluggableIconListMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
PluggableIconListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableIconListMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
NautilusWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
16 November 2015 9:35:29.839155 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	NameOfSubclass class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	NameOfSubclass class
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	NameOfSubclass class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	NameOfSubclass class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	NameOfSubclass class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>updatePackageGroupAndClassList
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	NameOfSubclass class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	NameOfSubclass
		oldPackage: 	a RPackage(myBeerTest)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	on: exception fork: handlerAction
	"Activate the receiver. In ca...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		index: 	3
		subscription: 	a WeakAnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		announcement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>classRemoved:fromCategory:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		aClass: 	NameOfSubclass
		aCategoryName: 	#myBeerTest
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemDictionary>>forgetClass:logged:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		aClass: 	NameOfSubclass
		aBool: 	true
	Receiver's instance variables: 
		tally: 	5042
		array: 	an Array(#MemoryHandle->MemoryHandle #EyeCharacterInspector->EyeCharacte...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupHasBeenAdded...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


NameOfSubclass class(Class)>>removeFromSystem:
	Receiver: NameOfSubclass
	Arguments and temporary variables: 
		logged: 	true
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary()
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NameOfSubclass
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


NameOfSubclass class(Class)>>removeFromSystem
	Receiver: NameOfSubclass
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary()
		format: 	134
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NameOfSubclass
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


RBRemoveClassChange>>primitiveExecute
	Receiver: NameOfSubclass removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#NameOfSubclass
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: NameOfSubclass removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	Remove NameOfSubclass
	Receiver's instance variables: 
		name: 	nil
		className: 	#NameOfSubclass
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: NameOfSubclass removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#NameOfSubclass
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	NameOfSubclass removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: [ self addUndo: aRefactoringChange execute ]
	Arguments and temporary variables: 
		aBlock: 	[ isPerformingRefactoring := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RBRefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[ self addUndo: aRefactoringChange execute ]
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	NameOfSubclass removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 
		change: 	a TreeNodeModel
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel nil nil an OkCancelToo...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] a KMKeyCo...etc...
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		acceptButton: 	nil
		cancelButton: 	nil
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel


OrderedCollection>>do:
	Receiver: an OrderedCollection(a TreeNodeModel)
	Arguments and temporary variables: 
		aBlock: 	[ :change | RBRefactoryChangeManager instance performChange: change con...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a TreeNodeModel)
		firstIndex: 	1
		lastIndex: 	1


ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel nil nil an OkCancelToo...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] a KMKeyCo...etc...
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		acceptButton: 	nil
		cancelButton: 	nil
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel


[ self accept ] in ChangesBrowser>>open
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel nil nil an OkCancelToo...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] a KMKeyCo...etc...
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		acceptButton: 	nil
		cancelButton: 	nil
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel


[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel)
		owner: 	a SpecDialogWindow(75235328)
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonModel
		okAction: 	a NewValueHolder[ [ self accept ] ]
		cancelButton: 	a ButtonModel
		cancelAction: 	a NewValueHolder[ [ self cancel ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
okAction value value == false
	ifFalse: [ ow...etc...
		labelHolder: 	a CollectionValueHolder[ 'Ok' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updatePackageGroupAndClassList
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
WeakAnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>classRemoved:fromCategory:
SystemDictionary>>forgetClass:logged:
NameOfSubclass class(Class)>>removeFromSystem:
NameOfSubclass class(Class)>>removeFromSystem
RBRemoveClassChange>>primitiveExecute
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
OrderedCollection>>do:
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
16 November 2015 9:35:55.365382 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>updatePackageGroupAndClassList
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	Beer
		oldPackage: 	a RPackage(myBeerTest)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	on: exception fork: handlerAction
	"Activate the receiver. In ca...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		index: 	3
		subscription: 	a WeakAnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		announcement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>classRemoved:fromCategory:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		aClass: 	Beer
		aCategoryName: 	#myBeerTest
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemDictionary>>forgetClass:logged:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		aClass: 	Beer
		aBool: 	true
	Receiver's instance variables: 
		tally: 	5042
		array: 	an Array(#MemoryHandle->MemoryHandle #EyeCharacterInspector->EyeCharacte...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupHasBeenAdded...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


Beer class(Class)>>removeFromSystem:
	Receiver: Beer
	Arguments and temporary variables: 
		logged: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


Beer class(Class)>>removeFromSystem
	Receiver: Beer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


RBRemoveClassChange>>primitiveExecute
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	Remove Beer
	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	Beer removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: [ self addUndo: aRefactoringChange execute ]
	Arguments and temporary variables: 
		aBlock: 	[ isPerformingRefactoring := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RBRefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[ self addUndo: aRefactoringChange execute ]
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	Beer removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 
		change: 	a TreeNodeModel
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel nil nil an OkCancelToo...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] a KMKeyCo...etc...
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		acceptButton: 	nil
		cancelButton: 	nil
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel


OrderedCollection>>do:
	Receiver: an OrderedCollection(a TreeNodeModel)
	Arguments and temporary variables: 
		aBlock: 	[ :change | RBRefactoryChangeManager instance performChange: change con...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a TreeNodeModel)
		firstIndex: 	1
		lastIndex: 	1


ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel nil nil an OkCancelToo...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] a KMKeyCo...etc...
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		acceptButton: 	nil
		cancelButton: 	nil
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel


[ self accept ] in ChangesBrowser>>open
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel nil nil an OkCancelToo...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] a KMKeyCo...etc...
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		acceptButton: 	nil
		cancelButton: 	nil
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel


[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel)
		owner: 	a SpecDialogWindow(268173312)
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonModel
		okAction: 	a NewValueHolder[ [ self accept ] ]
		cancelButton: 	a ButtonModel
		cancelAction: 	a NewValueHolder[ [ self cancel ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | super transferFor: pass...etc...
		color: 	a NewValueHolder[ Color white ]
		actionHolder: 	a NewValueHolder[ [ 
okAction value value == false
	ifFalse: [ ow...etc...
		labelHolder: 	a CollectionValueHolder[ 'Ok' ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updatePackageGroupAndClassList
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
WeakAnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>classRemoved:fromCategory:
SystemDictionary>>forgetClass:logged:
Beer class(Class)>>removeFromSystem:
Beer class(Class)>>removeFromSystem
RBRemoveClassChange>>primitiveExecute
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
OrderedCollection>>do:
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
16 November 2015 9:35:56.903146 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>updatePackageGroupAndClassList
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	Beer
		oldPackage: 	a RPackage(myBeerTest)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	on: exception fork: handlerAction
	"Activate the receiver. In ca...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		index: 	3
		subscription: 	a WeakAnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		announcement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>classRemoved:fromCategory:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		aClass: 	Beer
		aCategoryName: 	#myBeerTest
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemDictionary>>forgetClass:logged:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		aClass: 	Beer
		aBool: 	true
	Receiver's instance variables: 
		tally: 	5042
		array: 	an Array(#MemoryHandle->MemoryHandle #EyeCharacterInspector->EyeCharacte...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupHasBeenAdded...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


Beer class(Class)>>removeFromSystem:
	Receiver: Beer
	Arguments and temporary variables: 
		logged: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


Beer class(Class)>>removeFromSystem
	Receiver: Beer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


RBRemoveClassChange>>primitiveExecute
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	Remove Beer
	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	Beer removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: [ self addUndo: aRefactoringChange execute ]
	Arguments and temporary variables: 
		aBlock: 	[ isPerformingRefactoring := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RBRefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[ self addUndo: aRefactoringChange execute ]
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	Beer removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 
		change: 	a TreeNodeModel
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel nil nil an OkCancelToo...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] a KMKeyCo...etc...
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		acceptButton: 	nil
		cancelButton: 	nil
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel


OrderedCollection>>do:
	Receiver: an OrderedCollection(a TreeNodeModel)
	Arguments and temporary variables: 
		aBlock: 	[ :change | RBRefactoryChangeManager instance performChange: change con...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a TreeNodeModel)
		firstIndex: 	1
		lastIndex: 	1


ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel nil nil an OkCancelToo...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] a KMKeyCo...etc...
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		acceptButton: 	nil
		cancelButton: 	nil
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel


[ self accept ] in ChangesBrowser>>open
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel nil nil an OkCancelToo...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] a KMKeyCo...etc...
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		acceptButton: 	nil
		cancelButton: 	nil
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updatePackageGroupAndClassList
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
WeakAnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>classRemoved:fromCategory:
SystemDictionary>>forgetClass:logged:
Beer class(Class)>>removeFromSystem:
Beer class(Class)>>removeFromSystem
RBRemoveClassChange>>primitiveExecute
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
OrderedCollection>>do:
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
16 November 2015 9:35:59.545155 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>updatePackageGroupAndClassList
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	Beer
		oldPackage: 	a RPackage(myBeerTest)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	on: exception fork: handlerAction
	"Activate the receiver. In ca...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		index: 	3
		subscription: 	a WeakAnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		announcement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>classRemoved:fromCategory:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		aClass: 	Beer
		aCategoryName: 	#myBeerTest
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemDictionary>>forgetClass:logged:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		aClass: 	Beer
		aBool: 	true
	Receiver's instance variables: 
		tally: 	5042
		array: 	an Array(#MemoryHandle->MemoryHandle #EyeCharacterInspector->EyeCharacte...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupHasBeenAdded...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


Beer class(Class)>>removeFromSystem:
	Receiver: Beer
	Arguments and temporary variables: 
		logged: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


Beer class(Class)>>removeFromSystem
	Receiver: Beer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


RBRemoveClassChange>>primitiveExecute
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	Remove Beer
	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	Beer removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: [ self addUndo: aRefactoringChange execute ]
	Arguments and temporary variables: 
		aBlock: 	[ isPerformingRefactoring := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RBRefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[ self addUndo: aRefactoringChange execute ]
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	Beer removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 
		change: 	a TreeNodeModel
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel nil nil an OkCancelToo...etc...
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] a KMKeyCo...etc...
		announcer: 	a NewValueHolder[ an Announcer ]
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		acceptButton: 	nil
		cancelButton: 	nil
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel


OrderedCollection>>do:
	Receiver: an OrderedCollection(a TreeNodeModel)
	Arguments and temporary variables: 
		aBlock: 	[ :change | RBRefactoryChangeManager instance performChange: change con...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a TreeNodeModel)
		firstIndex: 	1
		lastIndex: 	1



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updatePackageGroupAndClassList
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
WeakAnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>classRemoved:fromCategory:
SystemDictionary>>forgetClass:logged:
Beer class(Class)>>removeFromSystem:
Beer class(Class)>>removeFromSystem
RBRemoveClassChange>>primitiveExecute
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
OrderedCollection>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
16 November 2015 9:36:00.255149 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>updatePackageGroupAndClassList
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	Beer
		oldPackage: 	a RPackage(myBeerTest)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	on: exception fork: handlerAction
	"Activate the receiver. In ca...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		index: 	3
		subscription: 	a WeakAnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		announcement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>classRemoved:fromCategory:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		aClass: 	Beer
		aCategoryName: 	#myBeerTest
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemDictionary>>forgetClass:logged:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		aClass: 	Beer
		aBool: 	true
	Receiver's instance variables: 
		tally: 	5042
		array: 	an Array(#MemoryHandle->MemoryHandle #EyeCharacterInspector->EyeCharacte...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupHasBeenAdded...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


Beer class(Class)>>removeFromSystem:
	Receiver: Beer
	Arguments and temporary variables: 
		logged: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


Beer class(Class)>>removeFromSystem
	Receiver: Beer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


RBRemoveClassChange>>primitiveExecute
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	Remove Beer
	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	Beer removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: [ self addUndo: aRefactoringChange execute ]
	Arguments and temporary variables: 
		aBlock: 	[ isPerformingRefactoring := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RBRefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[ self addUndo: aRefactoringChange execute ]
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	Beer removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updatePackageGroupAndClassList
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
WeakAnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>classRemoved:fromCategory:
SystemDictionary>>forgetClass:logged:
Beer class(Class)>>removeFromSystem:
Beer class(Class)>>removeFromSystem
RBRemoveClassChange>>primitiveExecute
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
OrderedCollection>>do:
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
16 November 2015 9:36:00.885154 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>updatePackageGroupAndClassList
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	Beer
		oldPackage: 	a RPackage(myBeerTest)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	on: exception fork: handlerAction
	"Activate the receiver. In ca...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		index: 	3
		subscription: 	a WeakAnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		announcement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>classRemoved:fromCategory:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		aClass: 	Beer
		aCategoryName: 	#myBeerTest
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemDictionary>>forgetClass:logged:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		aClass: 	Beer
		aBool: 	true
	Receiver's instance variables: 
		tally: 	5042
		array: 	an Array(#MemoryHandle->MemoryHandle #EyeCharacterInspector->EyeCharacte...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupHasBeenAdded...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


Beer class(Class)>>removeFromSystem:
	Receiver: Beer
	Arguments and temporary variables: 
		logged: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


Beer class(Class)>>removeFromSystem
	Receiver: Beer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


RBRemoveClassChange>>primitiveExecute
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	Remove Beer
	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	Beer removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection(Remove NameOfSubclass)
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: [ self addUndo: aRefactoringChange execute ]
	Arguments and temporary variables: 
		aBlock: 	[ isPerformingRefactoring := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RBRefactoryChangeManager>>performChange:
		startpc: 	31
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updatePackageGroupAndClassList
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
WeakAnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>classRemoved:fromCategory:
SystemDictionary>>forgetClass:logged:
Beer class(Class)>>removeFromSystem:
Beer class(Class)>>removeFromSystem
RBRemoveClassChange>>primitiveExecute
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
OrderedCollection>>do:
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
16 November 2015 9:36:01.965155 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>updatePackageGroupAndClassList
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	Beer
		oldPackage: 	a RPackage(myBeerTest)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	on: exception fork: handlerAction
	"Activate the receiver. In ca...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		index: 	3
		subscription: 	a WeakAnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		announcement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>classRemoved:fromCategory:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		aClass: 	Beer
		aCategoryName: 	#myBeerTest
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemDictionary>>forgetClass:logged:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		aClass: 	Beer
		aBool: 	true
	Receiver's instance variables: 
		tally: 	5042
		array: 	an Array(#MemoryHandle->MemoryHandle #EyeCharacterInspector->EyeCharacte...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupHasBeenAdded...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


Beer class(Class)>>removeFromSystem:
	Receiver: Beer
	Arguments and temporary variables: 
		logged: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


Beer class(Class)>>removeFromSystem
	Receiver: Beer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


RBRemoveClassChange>>primitiveExecute
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	Remove Beer
	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updatePackageGroupAndClassList
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
WeakAnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>classRemoved:fromCategory:
SystemDictionary>>forgetClass:logged:
Beer class(Class)>>removeFromSystem:
Beer class(Class)>>removeFromSystem
RBRemoveClassChange>>primitiveExecute
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
OrderedCollection>>do:
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
16 November 2015 9:36:02.583211 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>updatePackageGroupAndClassList
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	Beer
		oldPackage: 	a RPackage(myBeerTest)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	on: exception fork: handlerAction
	"Activate the receiver. In ca...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		index: 	3
		subscription: 	a WeakAnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		announcement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>classRemoved:fromCategory:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		aClass: 	Beer
		aCategoryName: 	#myBeerTest
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemDictionary>>forgetClass:logged:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		aClass: 	Beer
		aBool: 	true
	Receiver's instance variables: 
		tally: 	5042
		array: 	an Array(#MemoryHandle->MemoryHandle #EyeCharacterInspector->EyeCharacte...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupHasBeenAdded...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


Beer class(Class)>>removeFromSystem:
	Receiver: Beer
	Arguments and temporary variables: 
		logged: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


Beer class(Class)>>removeFromSystem
	Receiver: Beer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil


RBRemoveClassChange>>primitiveExecute
	Receiver: Beer removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#Beer
		isMeta: 	false



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updatePackageGroupAndClassList
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
WeakAnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>classRemoved:fromCategory:
SystemDictionary>>forgetClass:logged:
Beer class(Class)>>removeFromSystem:
Beer class(Class)>>removeFromSystem
RBRemoveClassChange>>primitiveExecute
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
OrderedCollection>>do:
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
16 November 2015 9:36:03.103146 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>updatePackageGroupAndClassList
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	Beer
		oldPackage: 	a RPackage(myBeerTest)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	on: exception fork: handlerAction
	"Activate the receiver. In ca...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		index: 	3
		subscription: 	a WeakAnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		announcement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>classRemoved:fromCategory:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		aClass: 	Beer
		aCategoryName: 	#myBeerTest
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemDictionary>>forgetClass:logged:
	Receiver: a SystemDictionary(lots of globals)
	Arguments and temporary variables: 
		aClass: 	Beer
		aBool: 	true
	Receiver's instance variables: 
		tally: 	5042
		array: 	an Array(#MemoryHandle->MemoryHandle #EyeCharacterInspector->EyeCharacte...etc...
		cachedClassNames: 	an OrderedCollection(#AColorSelectorMorph #AGroupHasBeenAdded...etc...
		cachedNonClassNames: 	an OrderedCollection(#ActiveEvent #ActiveHand #ActiveWorld...etc...


Beer class(Class)>>removeFromSystem:
	Receiver: Beer
	Arguments and temporary variables: 
		logged: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Beer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#myBeerTest
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updatePackageGroupAndClassList
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
WeakAnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>classRemoved:fromCategory:
SystemDictionary>>forgetClass:logged:
Beer class(Class)>>removeFromSystem:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Beer class(Class)>>removeFromSystem
RBRemoveClassChange>>primitiveExecute
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
OrderedCollection>>do:
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
16 November 2015 9:36:03.587474 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>updatePackageGroupAndClassList
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	Beer
		oldPackage: 	a RPackage(myBeerTest)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	on: exception fork: handlerAction
	"Activate the receiver. In ca...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		index: 	3
		subscription: 	a WeakAnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		announcement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer


SystemAnnouncer>>classRemoved:fromCategory:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		aClass: 	Beer
		aCategoryName: 	#myBeerTest
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updatePackageGroupAndClassList
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
WeakAnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>classRemoved:fromCategory:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SystemDictionary>>forgetClass:logged:
Beer class(Class)>>removeFromSystem:
Beer class(Class)>>removeFromSystem
RBRemoveClassChange>>primitiveExecute
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
OrderedCollection>>do:
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
16 November 2015 9:36:04.071146 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>updatePackageGroupAndClassList
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	Beer
		oldPackage: 	a RPackage(myBeerTest)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	on: exception fork: handlerAction
	"Activate the receiver. In ca...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		index: 	3
		subscription: 	a WeakAnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SystemAnnouncer(Announcer)>>announce:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		announcement: 	a ClassRemoved
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	false
		private: 	an Announcer



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updatePackageGroupAndClassList
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
WeakAnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SystemAnnouncer>>announce:
SystemAnnouncer>>classRemoved:fromCategory:
SystemDictionary>>forgetClass:logged:
Beer class(Class)>>removeFromSystem:
Beer class(Class)>>removeFromSystem
RBRemoveClassChange>>primitiveExecute
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
OrderedCollection>>do:
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
16 November 2015 9:36:05.241146 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: asNautilusSelection
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#asNautilusSelection
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI>>updatePackageGroupAndClassList
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		selectedPackage: 	a PackageTreePackageSelection
		selectedClass: 	Beer class
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		class: 	Beer
		oldPackage: 	a RPackage(myBeerTest)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	nil


WeakMessageSend>>value:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		anObject: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg: 	a ClassRemoved
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


WeakMessageSend>>cull:cull:
	Receiver: WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)
	Arguments and temporary variables: 
		arg1: 	a ClassRemoved
		arg2: 	a SystemAnnouncer
	Receiver's instance variables: 
		selector: 	#classRemoved:
		shouldBeNil: 	#()
		arguments: 	a WeakArray()


[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	on: exception fork: handlerAction
	"Activate the receiver. In ca...etc...
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	WeakAnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


WeakAnnouncementSubscription>>deliver:
	Receiver: a WeakAnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
	Receiver's instance variables: 
		list: 	a WeakFinalizationList
		next: 	nil
		announcer: 	a SystemAnnouncer
		announcementClass: 	ClassRemoved
		action: 	WeakMessageSend(#classRemoved: -> a PackageTreeNautilusUI)


[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		index: 	3
		subscription: 	a WeakAnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
		startIndex: 	1
		subscription: 	a WeakAnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ClassRemoved
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription a WeakAn...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>selectedClassWithoutChangingSelection:
PackageTreeNautilusUI(AbstractNautilusUI)>>selectedClass:
PackageTreeNautilusUI>>updatePackageGroupAndClassList
PackageTreeNautilusUI(AbstractNautilusUI)>>classRemoved:
WeakMessageSend>>value:
WeakMessageSend>>cull:
WeakMessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in WeakAnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
WeakAnnouncementSubscription>>deliver:
[ subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
SubscriptionRegistry>>deliver:
SystemAnnouncer(Announcer)>>announce:
SystemAnnouncer>>announce:
SystemAnnouncer>>classRemoved:fromCategory:
SystemDictionary>>forgetClass:logged:
Beer class(Class)>>removeFromSystem:
Beer class(Class)>>removeFromSystem
RBRemoveClassChange>>primitiveExecute
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change content ] in ChangesBrowser>>accept
OrderedCollection>>do:
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ 
okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ 
		m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
InvalidGlobalName: NameOfSubclass: NameOfSubclass is not a valid class name
16 November 2015 9:38:26.815588 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

SlotClassBuilder>>validateClassName
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	Object
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


SlotClassBuilder>>name:
	Receiver: a SlotClassBuilder
	Arguments and temporary variables: 
		aName: 	#NameOfSubclass
	Receiver's instance variables: 
		installer: 	a PharoClassInstaller
		oldClasses: 	an OrderedCollection()
		newClasses: 	an OrderedCollection()
		classSlots: 	#()
		category: 	nil
		superclass: 	Object
		name: 	#NameOfSubclass
		layoutClass: 	nil
		slots: 	#()
		traitComposition: 	{}
		classTraitComposition: 	{}
		result: 	nil
		sharedPoolsString: 	''
		sharedVariables: 	#()
		comment: 	nil
		commentStamp: 	nil


[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClass: (self layoutForType: type);
	slots: instanceVariablesString asSlotCollection;
	sharedVariablesFromString: classVariablesString;
	sharedPools: sharedPoolsString;
	category: category;
	environment: environment;
	copyTraitCompositionFromExistingClass;
	copyClassSlotsFromExistingClass ] in OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		name: 	#NameOfSubclass
		environment: 	a SystemDictionary(lots of globals)
		superClass: 	Object
		type: 	#normal
		instanceVariablesString: 	''
		classVariablesString: 	''
		sharedPoolsString: 	''
		category: 	'myBeerTest'
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
an OldClassBuilderAdapter

PharoClassInstaller class(AbstractClassInstaller class)>>make:
	Receiver: PharoClassInstaller
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClas...etc...
		builder: 	a SlotClassBuilder
	Receiver's instance variables: 
		superclass: 	AbstractClassInstaller
		methodDict: 	a MethodDictionary(#basicClassDefinitionChangedFrom:to:using:->Phar...etc...
		format: 	138
		layout: 	a FixedLayout
		instanceVariables: 	#('environment' 'instanceModification' 'methodUpdateStrategy...etc...
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoClassInstaller
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Slot-ClassBuilder'
		traitComposition: 	{}
		localSelectors: 	nil


OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		name: 	#NameOfSubclass
		environment: 	a SystemDictionary(lots of globals)
		superClass: 	Object
		type: 	#normal
		instanceVariablesString: 	''
		classVariablesString: 	''
		sharedPoolsString: 	''
		category: 	'myBeerTest'
	Receiver's instance variables: 
an OldClassBuilderAdapter

OldClassBuilderAdapter>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: an OldClassBuilderAdapter
	Arguments and temporary variables: 
		newSuper: 	Object
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'myBeerTest'
	Receiver's instance variables: 
an OldClassBuilderAdapter

Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: Object
	Arguments and temporary variables: 
		t: 	#NameOfSubclass
		f: 	''
		d: 	''
		s: 	''
		cat: 	'myBeerTest'
		class: 	nil
	Receiver's instance variables: 
		superclass: 	ProtoObject
		methodDict: 	a MethodDictionary(size 381)
		format: 	2
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{BalloonState. UndefinedObject. Boolean. FillStyle. ConnectionQueue...etc...
		name: 	#Object
		classPool: 	a Dictionary(#DependentsFields->a WeakIdentityKeyDictionary(TextStyl...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Objects'
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
	Receiver: nil
	Arguments and temporary variables: 
		nameOfClass: 	#NameOfSubclass
		instVarNames: 	''
		classVarNames: 	''
		poolDictnames: 	''
		category: 	'myBeerTest'
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ AnObsoleteBeer
		subclass: #NameOfSubclass
		instanceVariableNames...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


OpalCompiler(AbstractCompiler)>>evaluate:
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		textOrString: 	'AnObsoleteBeer subclass: #NameOfSubclass
		instanceVariableNames...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	^ AnObsoleteBeer
		subclass: #NameOfSubclass
		instanceVariableNames...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil
		useFaultyForParsing: 	false


PackageTreeNautilusUI class(Behavior)>>evaluate:
	Receiver: PackageTreeNautilusUI
	Arguments and temporary variables: 
		aString: 	'AnObsoleteBeer subclass: #NameOfSubclass
		instanceVariableNames: '''...etc...
	Receiver's instance variables: 
		superclass: 	NautilusUI
		methodDict: 	a MethodDictionary(#addClassCategory->PackageTreeNautilusUI>>#addCl...etc...
		format: 	180
		layout: 	a FixedLayout
		instanceVariables: 	#(#packagePattern #searchWidget #packagePatternString)
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil


PackageTreeNautilusUI(AbstractTool)>>addClassIn:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aPackage: 	a RPackage(myBeerTest)
		classSymbol: 	#NameOfSubclass
		systemCategory: 	#myBeerTest
		proposedSuperclass: 	AnObsoleteBeer
		classDefinition: 	'AnObsoleteBeer subclass: #NameOfSubclass
		instanceVariableNa...etc...
		newClass: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	'my'


PackageTreeNautilusUI>>addClassIn:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aPackage: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	'my'


PackageTreeNautilusUI(AbstractNautilusUI)>>addClass
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		package: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	'my'


[ target addClass ] in AbstractNautilusUI class>>classesFixMenu:
	Receiver: AbstractNautilusUI
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		superclass: 	AbstractTool
		methodDict: 	a MethodDictionary(size 381)
		format: 	166
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #window #hierarchyClass #cachedHierarchy #sourceTex...etc...
		organization: 	a ClassOrganization
		subclasses: 	{NautilusUI}
		name: 	#AbstractNautilusUI
		classPool: 	a Dictionary(#ClassesIconsCache->a WeakIdentityKeyDictionary(Abstrac...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ target addClass ]
	Arguments and temporary variables: 
		anArg: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		outerContext: 	AbstractNautilusUI class>>classesFixMenu:
		startpc: 	251
		numArgs: 	0


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(472907776)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(347@273) mouseUp 873922 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(326.0@265.0) corner: (450.0@282.0)
		owner: 	a MenuMorph(963641344)
		submorphs: 	#()
		fullBounds: 	(326.0@265.0) corner: (450.0@282.0)
		color: 	Color black
		extension: 	a MorphExtension (495714304)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(472907776)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(347@273) mouseUp 873922 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(326.0@265.0) corner: (450.0@282.0)
		owner: 	a MenuMorph(963641344)
		submorphs: 	#()
		fullBounds: 	(326.0@265.0) corner: (450.0@282.0)
		color: 	Color black
		extension: 	a MorphExtension (495714304)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(472907776)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(347@273) mouseUp 873922 nil]
	Receiver's instance variables: 
		bounds: 	(326.0@265.0) corner: (450.0@282.0)
		owner: 	a MenuMorph(963641344)
		submorphs: 	#()
		fullBounds: 	(326.0@265.0) corner: (450.0@282.0)
		color: 	Color black
		extension: 	a MorphExtension (495714304)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(472907776)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
	Receiver's instance variables: 
		bounds: 	(326.0@265.0) corner: (450.0@282.0)
		owner: 	a MenuMorph(963641344)
		submorphs: 	#()
		fullBounds: 	(326.0@265.0) corner: (450.0@282.0)
		color: 	Color black
		extension: 	a MorphExtension (495714304)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MouseButtonEvent>>sentTo:
	Receiver: [(347@273) mouseUp 873922 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(472907776)'Add Class...'
	Receiver's instance variables: 
		timeStamp: 	873922
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(347@273)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(472907776)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
	Receiver's instance variables: 
		bounds: 	(326.0@265.0) corner: (450.0@282.0)
		owner: 	a MenuMorph(963641344)
		submorphs: 	#()
		fullBounds: 	(326.0@265.0) corner: (450.0@282.0)
		color: 	Color black
		extension: 	a MorphExtension (495714304)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		aMorph: 	a ToggleMenuItemMorph(472907776)'Add Class...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(347@273) mouseUp 873922 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	873922
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(347@273)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		aMorph: 	a ToggleMenuItemMorph(472907776)'Add Class...'
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		aMorph: 	a ToggleMenuItemMorph(472907776)'Add Class...'
	Receiver's instance variables: 
		morph: 	nil


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(472907776)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(326.0@265.0) corner: (450.0@282.0)
		owner: 	a MenuMorph(963641344)
		submorphs: 	#()
		fullBounds: 	(326.0@265.0) corner: (450.0@282.0)
		color: 	Color black
		extension: 	a MorphExtension (495714304)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		aMorph: 	a MenuMorph(963641344)
		localEvt: 	[(347@273) mouseUp 873922 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(472907776)'Add Class...'
		morphs: 	an Array(a ToggleMenuItemMorph(583532544)'Find Method...' a ToggleMenuI...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(347@273) mouseUp 873922 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	873922
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(347@273)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		aMorph: 	a MenuMorph(963641344)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		aMorph: 	a MenuMorph(963641344)
	Receiver's instance variables: 
		morph: 	nil


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(963641344)
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(321.0@224.0) corner: (455.0@326.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(583532544)'Find Method...' a ToggleMe...etc...
		fullBounds: 	(321.0@224.0) corner: (455.0@326.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (1000603648) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a ClassWidget
		selectedItem: 	a ToggleMenuItemMorph(472907776)'Add Class...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(583532544)'Find Method......etc...
		basicColor: 	nil



--- The full stack ---
SlotClassBuilder>>validateClassName
SlotClassBuilder>>name:
[ :builder | 
builder
	superclass: superClass;
	name: name;
	layoutClass: (self layoutForType: type);
	slots: instanceVariablesString asSlotCollection;
	sharedVariablesFromString: classVariablesString;
	sharedPools: sharedPoolsString;
	category: category;
	environment: environment;
	copyTraitCompositionFromExistingClass;
	copyClassSlotsFromExistingClass ] in OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
PharoClassInstaller class(AbstractClassInstaller class)>>make:
OldClassBuilderAdapter>>name:inEnvironment:subclassOf:type:instanceVariableNames:classVariableNames:poolDictionaries:category:
OldClassBuilderAdapter>>superclass:subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
Object class(Class)>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
UndefinedObject>>subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
OpalCompiler(AbstractCompiler)>>evaluate:
PackageTreeNautilusUI class(Behavior)>>evaluate:
PackageTreeNautilusUI(AbstractTool)>>addClassIn:
PackageTreeNautilusUI>>addClassIn:
PackageTreeNautilusUI(AbstractNautilusUI)>>addClass
[ target addClass ] in AbstractNautilusUI class>>classesFixMenu:
BlockClosure>>cull:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asNautilusSelection" is nil
16 November 2015 9:38:28.481155 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asNautilusSelection
		exception: 	MessageNotUnderstood: receiver of "asNautilusSelection" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PackageTreeNautilus class>>parentOfClass:
	Receiver: PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	NameOfSubclass
		package: 	a RPackage(_UnpackagedPackage)
		tag: 	nil
	Receiver's instance variables: 
		superclass: 	Nautilus
		methodDict: 	a MethodDictionary(#defaultUIClass->PackageTreeNautilus>>#defaultUI...etc...
		format: 	164
		layout: 	a FixedLayout
		instanceVariables: 	#()
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PackageTreeNautilus
		classPool: 	a Dictionary(#ShowGroupsOnTop->true )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Nautilus-Tree'
		traitComposition: 	{}
		localSelectors: 	nil
		populateMethodList: 	nil
		emptyCommentWarning: 	nil
		groups: 	a GroupHolder
		maxSize: 	10
		useOldStyleKeys: 	nil


PackageTreeNautilus(Nautilus)>>parentOfClass:
	Receiver: a PackageTreeNautilus
	Arguments and temporary variables: 
		aClass: 	NameOfSubclass
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection()
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	nil
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreePackageSelection
		showCategories: 	true
		showComment: 	false
		showGroups: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a PackageTreeNautilusUI
		uiClass: 	nil


PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	NameOfSubclass
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	'my'


PackageTreeNautilusUI(AbstractNautilusUI)>>browseClass:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aClass: 	NameOfSubclass
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	'my'


PackageTreeNautilusUI(AbstractTool)>>addClassIn:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aPackage: 	a RPackage(myBeerTest)
		classSymbol: 	#NameOfSubclass
		systemCategory: 	#myBeerTest
		proposedSuperclass: 	AnObsoleteBeer
		classDefinition: 	'AnObsoleteBeer subclass: #NameOfSubclass
		instanceVariableNa...etc...
		newClass: 	NameOfSubclass
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	'my'


PackageTreeNautilusUI>>addClassIn:
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		aPackage: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	'my'


PackageTreeNautilusUI(AbstractNautilusUI)>>addClass
	Receiver: a PackageTreeNautilusUI
	Arguments and temporary variables: 
		package: 	a PackageTreePackageSelection
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		model: 	a PackageTreeNautilus
		window: 	a NautilusWindow(1065353216)
		hierarchyClass: 	nil
		cachedHierarchy: 	nil
		sourceTextArea: 	a PluggableTextMorphWithLimits(46137344)
		sourceCodePanel: 	a PanelMorph(986185728)
		commentTextArea: 	nil
		currentDisplayChoice: 	nil
		sourceTextAreaLimit: 	350
		sourceCodeContainer: 	a PanelMorph(807665664)
		shouldUpdateTitle: 	true
		testSemaphore: 	a Semaphore()
		sourceTextAreas: 	an OrderedCollection(a PluggableTextMorphWithLimits(46137344)-...etc...
		multipleMethodsEditor: 	a MultipleMethodsEditor(515112960)
		contentSelection: 	nil
		acceptor: 	a ClassDefinitionAcceptor
		classifier: 	a MethodClassifier
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageTreeWidget
		packagePattern: 	a RxMatcher
		searchWidget: 	a SearchMorph(447217664)
		packagePatternString: 	'my'


[ target addClass ] in AbstractNautilusUI class>>classesFixMenu:
	Receiver: AbstractNautilusUI
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		superclass: 	AbstractTool
		methodDict: 	a MethodDictionary(size 381)
		format: 	166
		layout: 	a FixedLayout
		instanceVariables: 	#(#model #window #hierarchyClass #cachedHierarchy #sourceTex...etc...
		organization: 	a ClassOrganization
		subclasses: 	{NautilusUI}
		name: 	#AbstractNautilusUI
		classPool: 	a Dictionary(#ClassesIconsCache->a WeakIdentityKeyDictionary(Abstrac...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ target addClass ]
	Arguments and temporary variables: 
		anArg: 	a PackageTreeNautilusUI
	Receiver's instance variables: 
		outerContext: 	AbstractNautilusUI class>>classesFixMenu:
		startpc: 	251
		numArgs: 	0


[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(472907776)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(347@273) mouseUp 873922 nil]
		w: 	a WorldMorph(511705088) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(326.0@265.0) corner: (450.0@282.0)
		owner: 	a MenuMorph(963641344)
		submorphs: 	#()
		fullBounds: 	(326.0@265.0) corner: (450.0@282.0)
		color: 	Color black
		extension: 	a MorphExtension (495714304)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


BlockClosure>>ensure:
	Receiver: [ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selec...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	134
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(s...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(472907776)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(347@273) mouseUp 873922 nil]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(326.0@265.0) corner: (450.0@282.0)
		owner: 	a MenuMorph(963641344)
		submorphs: 	#()
		fullBounds: 	(326.0@265.0) corner: (450.0@282.0)
		color: 	Color black
		extension: 	a MorphExtension (495714304)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(472907776)'Add Class...'
	Arguments and temporary variables: 
		evt: 	[(347@273) mouseUp 873922 nil]
	Receiver's instance variables: 
		bounds: 	(326.0@265.0) corner: (450.0@282.0)
		owner: 	a MenuMorph(963641344)
		submorphs: 	#()
		fullBounds: 	(326.0@265.0) corner: (450.0@282.0)
		color: 	Color black
		extension: 	a MorphExtension (495714304)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(472907776)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
	Receiver's instance variables: 
		bounds: 	(326.0@265.0) corner: (450.0@282.0)
		owner: 	a MenuMorph(963641344)
		submorphs: 	#()
		fullBounds: 	(326.0@265.0) corner: (450.0@282.0)
		color: 	Color black
		extension: 	a MorphExtension (495714304)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MouseButtonEvent>>sentTo:
	Receiver: [(347@273) mouseUp 873922 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(472907776)'Add Class...'
	Receiver's instance variables: 
		timeStamp: 	873922
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(347@273)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(472907776)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
	Receiver's instance variables: 
		bounds: 	(326.0@265.0) corner: (450.0@282.0)
		owner: 	a MenuMorph(963641344)
		submorphs: 	#()
		fullBounds: 	(326.0@265.0) corner: (450.0@282.0)
		color: 	Color black
		extension: 	a MorphExtension (495714304)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		aMorph: 	a ToggleMenuItemMorph(472907776)'Add Class...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(347@273) mouseUp 873922 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	873922
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(347@273)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		aMorph: 	a ToggleMenuItemMorph(472907776)'Add Class...'
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		aMorph: 	a ToggleMenuItemMorph(472907776)'Add Class...'
	Receiver's instance variables: 
		morph: 	nil


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(472907776)'Add Class...'
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(326.0@265.0) corner: (450.0@282.0)
		owner: 	a MenuMorph(963641344)
		submorphs: 	#()
		fullBounds: 	(326.0@265.0) corner: (450.0@282.0)
		color: 	Color black
		extension: 	a MorphExtension (495714304)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Add Class...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target addClass ]
		selector: 	#cull:
		arguments: 	an Array(a PackageTreeNautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'n, c'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		aMorph: 	a MenuMorph(963641344)
		localEvt: 	[(347@273) mouseUp 873922 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(472907776)'Add Class...'
		morphs: 	an Array(a ToggleMenuItemMorph(583532544)'Find Method...' a ToggleMenuI...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(347@273) mouseUp 873922 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	873922
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(347@273)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		aMorph: 	a MenuMorph(963641344)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		aMorph: 	a MenuMorph(963641344)
	Receiver's instance variables: 
		morph: 	nil


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(963641344)
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(321.0@224.0) corner: (455.0@326.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(583532544)'Find Method...' a ToggleMe...etc...
		fullBounds: 	(321.0@224.0) corner: (455.0@326.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (1000603648) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a ClassWidget
		selectedItem: 	a ToggleMenuItemMorph(472907776)'Add Class...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(583532544)'Find Method......etc...
		basicColor: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(963641344)
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
	Receiver's instance variables: 
		bounds: 	(321.0@224.0) corner: (455.0@326.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(583532544)'Find Method...' a ToggleMe...etc...
		fullBounds: 	(321.0@224.0) corner: (455.0@326.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (1000603648) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a ClassWidget
		selectedItem: 	a ToggleMenuItemMorph(472907776)'Add Class...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(583532544)'Find Method......etc...
		basicColor: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(963641344)
	Arguments and temporary variables: 
		evt: 	[(347@273) mouseUp 873922 nil]
	Receiver's instance variables: 
		bounds: 	(321.0@224.0) corner: (455.0@326.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(583532544)'Find Method...' a ToggleMe...etc...
		fullBounds: 	(321.0@224.0) corner: (455.0@326.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (1000603648) [other:  (basicColor -> (Color r: 0.82...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	a ClassWidget
		selectedItem: 	a ToggleMenuItemMorph(472907776)'Add Class...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(583532544)'Find Method......etc...
		basicColor: 	nil


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		focusHolder: 	a MenuMorph(963641344)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(384@244.0) corner: (400@260.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(384@244.0) corner: (400@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(76546048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(384@244) mouseOver nil nil]
		targetOffset: 	(52.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 877360 163 132 0 0 0 1)
		lastKeyScanCode: 	121
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(347@273) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1065353216) a Sp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(347@273) mouseUp 873922 nil]
		focusHolder: 	a MenuMorph(963641344)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(384@244.0) corner: (400@260.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(384@244.0) corner: (400@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(76546048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(384@244) mouseOver nil nil]
		targetOffset: 	(52.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 877360 163 132 0 0 0 1)
		lastKeyScanCode: 	121
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(347@273) mouseUp 873922 nil]
		focusHolder: 	a MenuMorph(963641344)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(384@244.0) corner: (400@260.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(384@244.0) corner: (400@260.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(76546048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(384@244) mouseOver nil nil]
		targetOffset: 	(52.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 877360 163 132 0 0 0 1)
		lastKeyScanCode: 	121
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asNautilusSelection
PackageTreeNautilus class>>parentOfClass:
PackageTreeNautilus(Nautilus)>>parentOfClass:
PackageTreeNautilusUI(NautilusUI)>>parentOfClass:
PackageTreeNautilusUI(AbstractNautilusUI)>>browseClass:
PackageTreeNautilusUI(AbstractTool)>>addClassIn:
PackageTreeNautilusUI>>addClassIn:
PackageTreeNautilusUI(AbstractNautilusUI)>>addClass
[ target addClass ] in AbstractNautilusUI class>>classesFixMenu:
BlockClosure>>cull:
[ 
| selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ 
		selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:38:47.02715 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		aNodeMorph: 	NodeMorph(nil)
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		nodeMorph: 	NodeMorph(nil)
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(143@143) mouseUp 894412 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	894412
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(143@143)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(121@191.0) corner: (137@207.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(121@191.0) corner: (137@207.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(372506624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(121@191) mouseOver nil nil]
		targetOffset: 	(39.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 895884 121 191 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(143@143) mouseOver nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1065353216) a Sp...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(121@191.0) corner: (137@207.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(121@191.0) corner: (137@207.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(372506624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(121@191) mouseOver nil nil]
		targetOffset: 	(39.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 895884 121 191 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(121@191.0) corner: (137@207.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(121@191.0) corner: (137@207.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(372506624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(121@191) mouseOver nil nil]
		targetOffset: 	(39.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 895884 121 191 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(121@191.0) corner: (137@207.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(121@191.0) corner: (137@207.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(372506624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(121@191) mouseOver nil nil]
		targetOffset: 	(39.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 895884 121 191 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(121@191.0) corner: (137@207.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(121@191.0) corner: (137@207.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(372506624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(121@191) mouseOver nil nil]
		targetOffset: 	(39.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 895884 121 191 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(143@143) mouseUp 894412 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(143@142) mouseDown red 894358 nil]
		firstClickUp: 	[(143@143) mouseUp 894412 nil]
		firstClickTime: 	894358
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(121@191.0) corner: (137@207.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(121@191.0) corner: (137@207.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(372506624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(121@191) mouseOver nil nil]
		targetOffset: 	(39.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 895884 121 191 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		evtBuf: 	#(1 894412 143 143 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(121@191.0) corner: (137@207.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(121@191.0) corner: (137@207.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(372506624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(121@191) mouseOver nil nil]
		targetOffset: 	(39.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 895884 121 191 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	895978
		lastStepMessage: 	nil
		lastCycleTime: 	895976
		alarms: 	a Heap()
		lastAlarmTime: 	895978
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	895978
		lastStepMessage: 	nil
		lastCycleTime: 	895976
		alarms: 	a Heap()
		lastAlarmTime: 	895978
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	895978
		lastStepMessage: 	nil
		lastCycleTime: 	895976
		alarms: 	a Heap()
		lastAlarmTime: 	895978
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	895978
		lastStepMessage: 	nil
		lastCycleTime: 	895976
		alarms: 	a Heap()
		lastAlarmTime: 	895978
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1065353216) a Sp...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:38:49.43315 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		aNodeMorph: 	NodeMorph(nil)
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		nodeMorph: 	NodeMorph(nil)
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(143@143) mouseUp 894412 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	894412
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(143@143)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(222@125.0) corner: (238@141.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@125.0) corner: (238@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(668729344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@125) mouseUp 898372 nil]
		targetOffset: 	(112.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 898372 222 125 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(143@143) mouseOver nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(607125504) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(222@125.0) corner: (238@141.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@125.0) corner: (238@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(668729344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@125) mouseUp 898372 nil]
		targetOffset: 	(112.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 898372 222 125 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(222@125.0) corner: (238@141.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@125.0) corner: (238@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(668729344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@125) mouseUp 898372 nil]
		targetOffset: 	(112.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 898372 222 125 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(222@125.0) corner: (238@141.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@125.0) corner: (238@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(668729344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@125) mouseUp 898372 nil]
		targetOffset: 	(112.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 898372 222 125 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(222@125.0) corner: (238@141.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@125.0) corner: (238@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(668729344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@125) mouseUp 898372 nil]
		targetOffset: 	(112.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 898372 222 125 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(143@143) mouseUp 894412 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(143@142) mouseDown red 894358 nil]
		firstClickUp: 	[(143@143) mouseUp 894412 nil]
		firstClickTime: 	894358
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(222@125.0) corner: (238@141.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@125.0) corner: (238@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(668729344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@125) mouseUp 898372 nil]
		targetOffset: 	(112.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 898372 222 125 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		evtBuf: 	#(1 894412 143 143 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(222@125.0) corner: (238@141.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@125.0) corner: (238@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(668729344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@125) mouseUp 898372 nil]
		targetOffset: 	(112.0@18.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 898372 222 125 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	898364
		lastStepMessage: 	nil
		lastCycleTime: 	898384
		alarms: 	a Heap()
		lastAlarmTime: 	898364
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	898364
		lastStepMessage: 	nil
		lastCycleTime: 	898384
		alarms: 	a Heap()
		lastAlarmTime: 	898364
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	898364
		lastStepMessage: 	nil
		lastCycleTime: 	898384
		alarms: 	a Heap()
		lastAlarmTime: 	898364
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	898364
		lastStepMessage: 	nil
		lastCycleTime: 	898384
		alarms: 	a Heap()
		lastAlarmTime: 	898364
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(607125504) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:38:50.299147 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		aNodeMorph: 	NodeMorph(nil)
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		nodeMorph: 	NodeMorph(nil)
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(143@143) mouseUp 894412 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	894412
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(143@143)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(233@154.0) corner: (249@170.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(233@154.0) corner: (249@170.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(84934656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(233@154) mouseUp 899236 nil]
		targetOffset: 	(103.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899236 233 154 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(143@143) mouseOver nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(17039360) a Nautilus...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(233@154.0) corner: (249@170.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(233@154.0) corner: (249@170.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(84934656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(233@154) mouseUp 899236 nil]
		targetOffset: 	(103.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899236 233 154 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(233@154.0) corner: (249@170.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(233@154.0) corner: (249@170.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(84934656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(233@154) mouseUp 899236 nil]
		targetOffset: 	(103.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899236 233 154 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(233@154.0) corner: (249@170.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(233@154.0) corner: (249@170.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(84934656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(233@154) mouseUp 899236 nil]
		targetOffset: 	(103.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899236 233 154 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(233@154.0) corner: (249@170.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(233@154.0) corner: (249@170.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(84934656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(233@154) mouseUp 899236 nil]
		targetOffset: 	(103.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899236 233 154 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(143@143) mouseUp 894412 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(143@142) mouseDown red 894358 nil]
		firstClickUp: 	[(143@143) mouseUp 894412 nil]
		firstClickTime: 	894358
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(233@154.0) corner: (249@170.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(233@154.0) corner: (249@170.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(84934656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(233@154) mouseUp 899236 nil]
		targetOffset: 	(103.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899236 233 154 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		evtBuf: 	#(1 894412 143 143 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(233@154.0) corner: (249@170.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(233@154.0) corner: (249@170.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(84934656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(233@154) mouseUp 899236 nil]
		targetOffset: 	(103.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899236 233 154 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	899230
		lastStepMessage: 	nil
		lastCycleTime: 	899250
		alarms: 	a Heap()
		lastAlarmTime: 	899230
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	899230
		lastStepMessage: 	nil
		lastCycleTime: 	899250
		alarms: 	a Heap()
		lastAlarmTime: 	899230
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	899230
		lastStepMessage: 	nil
		lastCycleTime: 	899250
		alarms: 	a Heap()
		lastAlarmTime: 	899230
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	899230
		lastStepMessage: 	nil
		lastCycleTime: 	899250
		alarms: 	a Heap()
		lastAlarmTime: 	899230
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(17039360) a Nautilus...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:38:50.905155 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		aNodeMorph: 	NodeMorph(nil)
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		nodeMorph: 	NodeMorph(nil)
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(143@143) mouseUp 894412 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	894412
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(143@143)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(238@155.0) corner: (254@171.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(238@155.0) corner: (254@171.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(387710976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(238@155) mouseUp 899844 nil]
		targetOffset: 	(88.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899844 238 155 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(143@143) mouseOver nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(732168192) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(238@155.0) corner: (254@171.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(238@155.0) corner: (254@171.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(387710976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(238@155) mouseUp 899844 nil]
		targetOffset: 	(88.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899844 238 155 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(238@155.0) corner: (254@171.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(238@155.0) corner: (254@171.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(387710976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(238@155) mouseUp 899844 nil]
		targetOffset: 	(88.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899844 238 155 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(238@155.0) corner: (254@171.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(238@155.0) corner: (254@171.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(387710976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(238@155) mouseUp 899844 nil]
		targetOffset: 	(88.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899844 238 155 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(238@155.0) corner: (254@171.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(238@155.0) corner: (254@171.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(387710976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(238@155) mouseUp 899844 nil]
		targetOffset: 	(88.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899844 238 155 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(143@143) mouseUp 894412 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(143@142) mouseDown red 894358 nil]
		firstClickUp: 	[(143@143) mouseUp 894412 nil]
		firstClickTime: 	894358
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(238@155.0) corner: (254@171.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(238@155.0) corner: (254@171.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(387710976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(238@155) mouseUp 899844 nil]
		targetOffset: 	(88.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899844 238 155 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		evtBuf: 	#(1 894412 143 143 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(238@155.0) corner: (254@171.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(238@155.0) corner: (254@171.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(387710976)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(238@155) mouseUp 899844 nil]
		targetOffset: 	(88.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 899844 238 155 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 469499904))(3...etc...
		lastStepTime: 	899836
		lastStepMessage: 	nil
		lastCycleTime: 	899856
		alarms: 	a Heap()
		lastAlarmTime: 	899836
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 469499904))(3...etc...
		lastStepTime: 	899836
		lastStepMessage: 	nil
		lastCycleTime: 	899856
		alarms: 	a Heap()
		lastAlarmTime: 	899836
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 469499904))(3...etc...
		lastStepTime: 	899836
		lastStepMessage: 	nil
		lastCycleTime: 	899856
		alarms: 	a Heap()
		lastAlarmTime: 	899836
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#toggleSelected 469499904))(3...etc...
		lastStepTime: 	899836
		lastStepMessage: 	nil
		lastCycleTime: 	899856
		alarms: 	a Heap()
		lastAlarmTime: 	899836
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(732168192) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:38:51.321156 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		aNodeMorph: 	NodeMorph(nil)
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		nodeMorph: 	NodeMorph(nil)
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(143@143) mouseUp 894412 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	894412
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(143@143)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(247@170.0) corner: (263@186.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(247@170.0) corner: (263@186.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(584581120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(247@170) mouseUp 900268 nil]
		targetOffset: 	(77.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900268 247 170 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(143@143) mouseOver nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1065353216) a Sp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(247@170.0) corner: (263@186.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(247@170.0) corner: (263@186.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(584581120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(247@170) mouseUp 900268 nil]
		targetOffset: 	(77.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900268 247 170 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(248@171.0) corner: (264@187.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(248@171.0) corner: (264@187.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(584581120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(248@171) mouseOver nil nil]
		targetOffset: 	(77.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900286 248 171 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(248@171.0) corner: (264@187.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(248@171.0) corner: (264@187.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(584581120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(248@171) mouseOver nil nil]
		targetOffset: 	(77.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900286 248 171 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(248@171.0) corner: (264@187.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(248@171.0) corner: (264@187.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(584581120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(248@171) mouseOver nil nil]
		targetOffset: 	(77.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900286 248 171 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(143@143) mouseUp 894412 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(143@142) mouseDown red 894358 nil]
		firstClickUp: 	[(143@143) mouseUp 894412 nil]
		firstClickTime: 	894358
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(248@171.0) corner: (264@187.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(248@171.0) corner: (264@187.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(584581120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(248@171) mouseOver nil nil]
		targetOffset: 	(77.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900286 248 171 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		evtBuf: 	#(1 894412 143 143 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(248@171.0) corner: (264@187.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(248@171.0) corner: (264@187.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(584581120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(248@171) mouseOver nil nil]
		targetOffset: 	(77.0@3.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900286 248 171 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	900300
		lastStepMessage: 	nil
		lastCycleTime: 	900296
		alarms: 	a Heap()
		lastAlarmTime: 	900300
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	900300
		lastStepMessage: 	nil
		lastCycleTime: 	900296
		alarms: 	a Heap()
		lastAlarmTime: 	900300
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	900300
		lastStepMessage: 	nil
		lastCycleTime: 	900296
		alarms: 	a Heap()
		lastAlarmTime: 	900300
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	900300
		lastStepMessage: 	nil
		lastCycleTime: 	900296
		alarms: 	a Heap()
		lastAlarmTime: 	900300
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1065353216) a Sp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:38:51.891146 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		aNodeMorph: 	NodeMorph(nil)
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		nodeMorph: 	NodeMorph(nil)
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(143@143) mouseUp 894412 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	894412
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(143@143)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(272@199.0) corner: (288@215.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(272@199.0) corner: (288@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(676593664)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(272@199) mouseUp 900828 nil]
		targetOffset: 	(82.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900828 272 199 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(143@143) mouseOver nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(511442944) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(272@199.0) corner: (288@215.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(272@199.0) corner: (288@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(676593664)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(272@199) mouseUp 900828 nil]
		targetOffset: 	(82.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900828 272 199 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(272@199.0) corner: (288@215.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(272@199.0) corner: (288@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(676593664)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(272@199) mouseUp 900828 nil]
		targetOffset: 	(82.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900828 272 199 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(272@199.0) corner: (288@215.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(272@199.0) corner: (288@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(676593664)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(272@199) mouseUp 900828 nil]
		targetOffset: 	(82.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900828 272 199 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(272@199.0) corner: (288@215.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(272@199.0) corner: (288@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(676593664)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(272@199) mouseUp 900828 nil]
		targetOffset: 	(82.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900828 272 199 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(143@143) mouseUp 894412 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(143@142) mouseDown red 894358 nil]
		firstClickUp: 	[(143@143) mouseUp 894412 nil]
		firstClickTime: 	894358
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(272@199.0) corner: (288@215.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(272@199.0) corner: (288@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(676593664)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(272@199) mouseUp 900828 nil]
		targetOffset: 	(82.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900828 272 199 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		evtBuf: 	#(1 894412 143 143 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(272@199.0) corner: (288@215.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(272@199.0) corner: (288@215.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(676593664)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(272@199) mouseUp 900828 nil]
		targetOffset: 	(82.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 900828 272 199 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	900820
		lastStepMessage: 	nil
		lastCycleTime: 	900842
		alarms: 	a Heap()
		lastAlarmTime: 	900820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	900820
		lastStepMessage: 	nil
		lastCycleTime: 	900842
		alarms: 	a Heap()
		lastAlarmTime: 	900820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	900820
		lastStepMessage: 	nil
		lastCycleTime: 	900842
		alarms: 	a Heap()
		lastAlarmTime: 	900820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	900820
		lastStepMessage: 	nil
		lastCycleTime: 	900842
		alarms: 	a Heap()
		lastAlarmTime: 	900820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(511442944) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:38:52.353146 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		aNodeMorph: 	NodeMorph(nil)
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		nodeMorph: 	NodeMorph(nil)
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(143@143) mouseUp 894412 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	894412
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(143@143)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(300@212.0) corner: (316@228.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(300@212.0) corner: (316@228.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(992215040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(300@212) mouseUp 901300 nil]
		targetOffset: 	(90.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901300 300 212 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(143@143) mouseOver nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(997982208) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(300@212.0) corner: (316@228.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(300@212.0) corner: (316@228.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(992215040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(300@212) mouseUp 901300 nil]
		targetOffset: 	(90.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901300 300 212 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(300@212.0) corner: (316@228.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(300@212.0) corner: (316@228.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(992215040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(300@212) mouseUp 901300 nil]
		targetOffset: 	(90.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901300 300 212 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(300@212.0) corner: (316@228.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(300@212.0) corner: (316@228.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(992215040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(300@212) mouseUp 901300 nil]
		targetOffset: 	(90.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901300 300 212 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(300@212.0) corner: (316@228.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(300@212.0) corner: (316@228.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(992215040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(300@212) mouseUp 901300 nil]
		targetOffset: 	(90.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901300 300 212 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(143@143) mouseUp 894412 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(143@142) mouseDown red 894358 nil]
		firstClickUp: 	[(143@143) mouseUp 894412 nil]
		firstClickTime: 	894358
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(300@212.0) corner: (316@228.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(300@212.0) corner: (316@228.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(992215040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(300@212) mouseUp 901300 nil]
		targetOffset: 	(90.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901300 300 212 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		evtBuf: 	#(1 894412 143 143 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(300@212.0) corner: (316@228.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(300@212.0) corner: (316@228.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(992215040)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(300@212) mouseUp 901300 nil]
		targetOffset: 	(90.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901300 300 212 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	901286
		lastStepMessage: 	nil
		lastCycleTime: 	901306
		alarms: 	a Heap()
		lastAlarmTime: 	901286
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	901286
		lastStepMessage: 	nil
		lastCycleTime: 	901306
		alarms: 	a Heap()
		lastAlarmTime: 	901286
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	901286
		lastStepMessage: 	nil
		lastCycleTime: 	901306
		alarms: 	a Heap()
		lastAlarmTime: 	901286
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	901286
		lastStepMessage: 	nil
		lastCycleTime: 	901306
		alarms: 	a Heap()
		lastAlarmTime: 	901286
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(997982208) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:38:52.869155 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		aNodeMorph: 	NodeMorph(nil)
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		nodeMorph: 	NodeMorph(nil)
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(143@143) mouseUp 894412 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	894412
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(143@143)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(324@250.0) corner: (340@266.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(324@250.0) corner: (340@266.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(818151424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(324@250) mouseUp 901788 nil]
		targetOffset: 	(94.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901788 324 250 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(143@143) mouseOver nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1065353216) a Sp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(326@254.0) corner: (342@270.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(326@254.0) corner: (342@270.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(818151424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(326@254) mouseOver nil nil]
		targetOffset: 	(94.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901796 325 251 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(326@254.0) corner: (342@270.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(326@254.0) corner: (342@270.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(818151424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(326@254) mouseOver nil nil]
		targetOffset: 	(94.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901796 325 251 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(326@254.0) corner: (342@270.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(326@254.0) corner: (342@270.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(818151424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(326@254) mouseOver nil nil]
		targetOffset: 	(94.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901796 325 251 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(326@254.0) corner: (342@270.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(326@254.0) corner: (342@270.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(818151424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(326@254) mouseOver nil nil]
		targetOffset: 	(94.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901796 325 251 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(143@143) mouseUp 894412 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(143@142) mouseDown red 894358 nil]
		firstClickUp: 	[(143@143) mouseUp 894412 nil]
		firstClickTime: 	894358
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(326@254.0) corner: (342@270.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(326@254.0) corner: (342@270.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(818151424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(326@254) mouseOver nil nil]
		targetOffset: 	(94.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901796 325 251 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		evtBuf: 	#(1 894412 143 143 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(326@254.0) corner: (342@270.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(326@254.0) corner: (342@270.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(818151424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(326@254) mouseOver nil nil]
		targetOffset: 	(94.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 901796 325 251 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	901844
		lastStepMessage: 	nil
		lastCycleTime: 	901840
		alarms: 	a Heap()
		lastAlarmTime: 	901844
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	901844
		lastStepMessage: 	nil
		lastCycleTime: 	901840
		alarms: 	a Heap()
		lastAlarmTime: 	901844
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	901844
		lastStepMessage: 	nil
		lastCycleTime: 	901840
		alarms: 	a Heap()
		lastAlarmTime: 	901844
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	901844
		lastStepMessage: 	nil
		lastCycleTime: 	901840
		alarms: 	a Heap()
		lastAlarmTime: 	901844
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1065353216) a Sp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:38:53.33515 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: true
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(true)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		aNodeMorph: 	NodeMorph(nil)
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(143@143) mouseUp 894412 nil]
		nodeMorph: 	NodeMorph(nil)
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(143@143) mouseUp 894412 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	894412
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(143@143)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(343@281.0) corner: (359@297.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(343@281.0) corner: (359@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(150208512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(343@281) mouseOver nil nil]
		targetOffset: 	(88.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 902260 340 273 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(143@143) mouseOver nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1065353216) a Sp...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(343@281.0) corner: (359@297.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(343@281.0) corner: (359@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(150208512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(343@281) mouseOver nil nil]
		targetOffset: 	(88.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 902260 340 273 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(343@281.0) corner: (359@297.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(343@281.0) corner: (359@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(150208512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(343@281) mouseOver nil nil]
		targetOffset: 	(88.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 902260 340 273 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(343@281.0) corner: (359@297.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(343@281.0) corner: (359@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(150208512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(343@281) mouseOver nil nil]
		targetOffset: 	(88.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 902260 340 273 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(343@281.0) corner: (359@297.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(343@281.0) corner: (359@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(150208512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(343@281) mouseOver nil nil]
		targetOffset: 	(88.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 902260 340 273 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(143@143) mouseUp 894412 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(143@142) mouseDown red 894358 nil]
		firstClickUp: 	[(143@143) mouseUp 894412 nil]
		firstClickTime: 	894358
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(143@143) mouseUp 894412 nil]
		evt: 	[(143@143) mouseUp 894412 nil]
	Receiver's instance variables: 
		bounds: 	(343@281.0) corner: (359@297.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(343@281.0) corner: (359@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(150208512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(343@281) mouseOver nil nil]
		targetOffset: 	(88.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 902260 340 273 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(143@143) mouseUp 894412 nil]
		evtBuf: 	#(1 894412 143 143 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(343@281.0) corner: (359@297.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(343@281.0) corner: (359@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(150208512)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(343@281) mouseOver nil nil]
		targetOffset: 	(88.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 902260 340 273 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	902302
		lastStepMessage: 	nil
		lastCycleTime: 	902300
		alarms: 	a Heap()
		lastAlarmTime: 	902302
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	902302
		lastStepMessage: 	nil
		lastCycleTime: 	902300
		alarms: 	a Heap()
		lastAlarmTime: 	902302
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	902302
		lastStepMessage: 	nil
		lastCycleTime: 	902300
		alarms: 	a Heap()
		lastAlarmTime: 	902302
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:40:41.953438 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	nil
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(217@299) mouseUp 1009566 nil]
		aNodeMorph: 	nil
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(217@299) mouseUp 1009566 nil]
		nodeMorph: 	nil
		wasHigh: 	false
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(217@299) mouseUp 1009566 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(217@299) mouseUp 1009566 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	1009566
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(217@299)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(217@299) mouseUp 1009566 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(217@299) mouseUp 1009566 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(217@299) mouseUp 1009566 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(184@344.0) corner: (200@360.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(184@344.0) corner: (200@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(372506624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(184@344) mouseOver nil nil]
		targetOffset: 	(28.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1010822 184 344 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(217@299) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1065353216) a Sp...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(217@299) mouseUp 1009566 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(184@344.0) corner: (200@360.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(184@344.0) corner: (200@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(372506624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(184@344) mouseOver nil nil]
		targetOffset: 	(28.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1010822 184 344 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(217@299) mouseUp 1009566 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(184@344.0) corner: (200@360.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(184@344.0) corner: (200@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(372506624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(184@344) mouseOver nil nil]
		targetOffset: 	(28.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1010822 184 344 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(217@299) mouseUp 1009566 nil]
	Receiver's instance variables: 
		bounds: 	(184@344.0) corner: (200@360.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(184@344.0) corner: (200@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(372506624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(184@344) mouseOver nil nil]
		targetOffset: 	(28.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1010822 184 344 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(217@299) mouseUp 1009566 nil]
		evt: 	[(217@299) mouseUp 1009566 nil]
	Receiver's instance variables: 
		bounds: 	(184@344.0) corner: (200@360.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(184@344.0) corner: (200@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(372506624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(184@344) mouseOver nil nil]
		targetOffset: 	(28.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1010822 184 344 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(217@299) mouseUp 1009566 nil]
		evtBuf: 	#(1 1009566 217 299 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(184@344.0) corner: (200@360.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(184@344.0) corner: (200@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableIconListMorph(372506624)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(184@344) mouseOver nil nil]
		targetOffset: 	(28.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1010822 184 344 0 0 0 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	1010918
		lastStepMessage: 	nil
		lastCycleTime: 	1010916
		alarms: 	a Heap()
		lastAlarmTime: 	1010918
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	1010918
		lastStepMessage: 	nil
		lastCycleTime: 	1010916
		alarms: 	a Heap()
		lastAlarmTime: 	1010918
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	1010918
		lastStepMessage: 	nil
		lastCycleTime: 	1010916
		alarms: 	a Heap()
		lastAlarmTime: 	1010918
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	1010918
		lastStepMessage: 	nil
		lastCycleTime: 	1010916
		alarms: 	a Heap()
		lastAlarmTime: 	1010918
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1065353216) a Sp...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:41:04.573149 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(150@182) mouseUp 1033516 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(150@182) mouseUp 1033516 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(150@182) mouseUp 1033516 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	1033516
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(150@182)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(150@182.0) corner: (166@198.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(150@182.0) corner: (166@198.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(356253696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(150@182) mouseUp 1033516 nil]
		targetOffset: 	(60.0@65.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1033516 150 182 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(150@182) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1065353216) a Sp...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(150@182.0) corner: (166@198.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(150@182.0) corner: (166@198.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(356253696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(150@182) mouseUp 1033516 nil]
		targetOffset: 	(60.0@65.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1033516 150 182 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(150@182.0) corner: (166@198.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(150@182.0) corner: (166@198.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(356253696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(150@182) mouseUp 1033516 nil]
		targetOffset: 	(60.0@65.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1033516 150 182 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(150@182.0) corner: (166@198.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(150@182.0) corner: (166@198.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(356253696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(150@182) mouseUp 1033516 nil]
		targetOffset: 	(60.0@65.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1033516 150 182 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		evt: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(150@182.0) corner: (166@198.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(150@182.0) corner: (166@198.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(356253696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(150@182) mouseUp 1033516 nil]
		targetOffset: 	(60.0@65.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1033516 150 182 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(150@182) mouseUp 1033516 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(150@182) mouseUp 1033516 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(150@182) mouseDown red 1033440 nil]
		firstClickUp: 	[(150@182) mouseUp 1033516 nil]
		firstClickTime: 	1033440
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		evt: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(150@182.0) corner: (166@198.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(150@182.0) corner: (166@198.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(356253696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(150@182) mouseUp 1033516 nil]
		targetOffset: 	(60.0@65.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1033516 150 182 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(150@182) mouseUp 1033516 nil]
		evtBuf: 	#(1 1033516 150 182 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(150@182.0) corner: (166@198.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(150@182.0) corner: (166@198.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(356253696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(150@182) mouseUp 1033516 nil]
		targetOffset: 	(60.0@65.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1033516 150 182 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	1033500
		lastStepMessage: 	nil
		lastCycleTime: 	1033520
		alarms: 	a Heap()
		lastAlarmTime: 	1033500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	1033500
		lastStepMessage: 	nil
		lastCycleTime: 	1033520
		alarms: 	a Heap()
		lastAlarmTime: 	1033500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	1033500
		lastStepMessage: 	nil
		lastCycleTime: 	1033520
		alarms: 	a Heap()
		lastAlarmTime: 	1033500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	1033500
		lastStepMessage: 	nil
		lastCycleTime: 	1033520
		alarms: 	a Heap()
		lastAlarmTime: 	1033500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a NautilusWindow(1065353216) a Sp...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:41:06.125477 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(150@182) mouseUp 1033516 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(150@182) mouseUp 1033516 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(150@182) mouseUp 1033516 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	1033516
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(150@182)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(206@133.0) corner: (222@149.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(206@133.0) corner: (222@149.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(187170816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(206@133) mouseUp 1035068 nil]
		targetOffset: 	(96.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035068 206 133 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(150@182) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(843317248) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(206@133.0) corner: (222@149.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(206@133.0) corner: (222@149.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(187170816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(206@133) mouseUp 1035068 nil]
		targetOffset: 	(96.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035068 206 133 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(206@133.0) corner: (222@149.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(206@133.0) corner: (222@149.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(187170816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(206@133) mouseUp 1035068 nil]
		targetOffset: 	(96.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035068 206 133 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(206@133.0) corner: (222@149.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(206@133.0) corner: (222@149.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(187170816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(206@133) mouseUp 1035068 nil]
		targetOffset: 	(96.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035068 206 133 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		evt: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(206@133.0) corner: (222@149.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(206@133.0) corner: (222@149.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(187170816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(206@133) mouseUp 1035068 nil]
		targetOffset: 	(96.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035068 206 133 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(150@182) mouseUp 1033516 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(150@182) mouseUp 1033516 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(150@182) mouseDown red 1033440 nil]
		firstClickUp: 	[(150@182) mouseUp 1033516 nil]
		firstClickTime: 	1033440
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		evt: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(206@133.0) corner: (222@149.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(206@133.0) corner: (222@149.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(187170816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(206@133) mouseUp 1035068 nil]
		targetOffset: 	(96.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035068 206 133 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(150@182) mouseUp 1033516 nil]
		evtBuf: 	#(1 1033516 150 182 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(206@133.0) corner: (222@149.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(206@133.0) corner: (222@149.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(187170816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(206@133) mouseUp 1035068 nil]
		targetOffset: 	(96.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035068 206 133 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	1035056
		lastStepMessage: 	nil
		lastCycleTime: 	1035076
		alarms: 	a Heap()
		lastAlarmTime: 	1035056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	1035056
		lastStepMessage: 	nil
		lastCycleTime: 	1035076
		alarms: 	a Heap()
		lastAlarmTime: 	1035056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	1035056
		lastStepMessage: 	nil
		lastCycleTime: 	1035076
		alarms: 	a Heap()
		lastAlarmTime: 	1035056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	1035056
		lastStepMessage: 	nil
		lastCycleTime: 	1035076
		alarms: 	a Heap()
		lastAlarmTime: 	1035056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(843317248) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:41:06.885453 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(150@182) mouseUp 1033516 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(150@182) mouseUp 1033516 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(150@182) mouseUp 1033516 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	1033516
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(150@182)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(208@140.0) corner: (224@156.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(208@140.0) corner: (224@156.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(865075200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(208@140) mouseUp 1035828 nil]
		targetOffset: 	(78.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035828 208 140 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(150@182) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(1048576000) a Nautil...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(208@140.0) corner: (224@156.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(208@140.0) corner: (224@156.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(865075200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(208@140) mouseUp 1035828 nil]
		targetOffset: 	(78.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035828 208 140 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(208@140.0) corner: (224@156.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(208@140.0) corner: (224@156.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(865075200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(208@140) mouseUp 1035828 nil]
		targetOffset: 	(78.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035828 208 140 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(208@140.0) corner: (224@156.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(208@140.0) corner: (224@156.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(865075200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(208@140) mouseUp 1035828 nil]
		targetOffset: 	(78.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035828 208 140 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		evt: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(208@140.0) corner: (224@156.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(208@140.0) corner: (224@156.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(865075200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(208@140) mouseUp 1035828 nil]
		targetOffset: 	(78.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035828 208 140 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(150@182) mouseUp 1033516 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(150@182) mouseUp 1033516 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(150@182) mouseDown red 1033440 nil]
		firstClickUp: 	[(150@182) mouseUp 1033516 nil]
		firstClickTime: 	1033440
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		evt: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(208@140.0) corner: (224@156.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(208@140.0) corner: (224@156.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(865075200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(208@140) mouseUp 1035828 nil]
		targetOffset: 	(78.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035828 208 140 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(150@182) mouseUp 1033516 nil]
		evtBuf: 	#(1 1033516 150 182 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(208@140.0) corner: (224@156.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(208@140.0) corner: (224@156.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(865075200)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(208@140) mouseUp 1035828 nil]
		targetOffset: 	(78.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1035828 208 140 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	1035816
		lastStepMessage: 	nil
		lastCycleTime: 	1035836
		alarms: 	a Heap()
		lastAlarmTime: 	1035816
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	1035816
		lastStepMessage: 	nil
		lastCycleTime: 	1035836
		alarms: 	a Heap()
		lastAlarmTime: 	1035816
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	1035816
		lastStepMessage: 	nil
		lastCycleTime: 	1035836
		alarms: 	a Heap()
		lastAlarmTime: 	1035816
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(447217664))(a SearchMorp...etc...
		lastStepTime: 	1035816
		lastStepMessage: 	nil
		lastCycleTime: 	1035836
		alarms: 	a Heap()
		lastAlarmTime: 	1035816
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(1048576000) a Nautil...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:41:07.483146 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(150@182) mouseUp 1033516 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(150@182) mouseUp 1033516 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(150@182) mouseUp 1033516 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	1033516
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(150@182)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(222@149.0) corner: (238@165.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@149.0) corner: (238@165.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(652738560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@149) mouseUp 1036420 nil]
		targetOffset: 	(72.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1036420 222 149 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(150@182) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(1020526592) a Nautil...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(222@149.0) corner: (238@165.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@149.0) corner: (238@165.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(652738560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@149) mouseUp 1036420 nil]
		targetOffset: 	(72.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1036420 222 149 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(222@149.0) corner: (238@165.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@149.0) corner: (238@165.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(652738560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@149) mouseUp 1036420 nil]
		targetOffset: 	(72.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1036420 222 149 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(222@149.0) corner: (238@165.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@149.0) corner: (238@165.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(652738560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@149) mouseUp 1036420 nil]
		targetOffset: 	(72.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1036420 222 149 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		evt: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(222@149.0) corner: (238@165.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@149.0) corner: (238@165.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(652738560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@149) mouseUp 1036420 nil]
		targetOffset: 	(72.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1036420 222 149 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(150@182) mouseUp 1033516 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(150@182) mouseUp 1033516 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(150@182) mouseDown red 1033440 nil]
		firstClickUp: 	[(150@182) mouseUp 1033516 nil]
		firstClickTime: 	1033440
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		evt: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(222@149.0) corner: (238@165.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@149.0) corner: (238@165.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(652738560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@149) mouseUp 1036420 nil]
		targetOffset: 	(72.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1036420 222 149 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(150@182) mouseUp 1033516 nil]
		evtBuf: 	#(1 1033516 150 182 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(222@149.0) corner: (238@165.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(222@149.0) corner: (238@165.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(652738560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(222@149) mouseUp 1036420 nil]
		targetOffset: 	(72.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1036420 222 149 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 378798080))(...etc...
		lastStepTime: 	1036412
		lastStepMessage: 	nil
		lastCycleTime: 	1036434
		alarms: 	a Heap()
		lastAlarmTime: 	1036412
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 378798080))(...etc...
		lastStepTime: 	1036412
		lastStepMessage: 	nil
		lastCycleTime: 	1036434
		alarms: 	a Heap()
		lastAlarmTime: 	1036412
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 378798080))(...etc...
		lastStepTime: 	1036412
		lastStepMessage: 	nil
		lastCycleTime: 	1036434
		alarms: 	a Heap()
		lastAlarmTime: 	1036412
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> 3PButton(#browseClassVars 378798080))(...etc...
		lastStepTime: 	1036412
		lastStepMessage: 	nil
		lastCycleTime: 	1036434
		alarms: 	a Heap()
		lastAlarmTime: 	1036412
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(1020526592) a Nautil...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "lastClicked:" is nil
16 November 2015 9:41:08.125155 am

VM: unix - i686 - linux-gnu - NBCoInterpreter NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
NBCogit NativeBoost-CogPlugin-GuillermoPolito.19 uuid: acc98e51-2fba-4841-a965-2975997bba66 May 15 2014
https://github.com/pharo-project/pharo-vm.git Commit: ed4a4f59208968a21d82fd2406f75c2c4de558b2 Date: 2014-05-15 18:23:04 +0200 By: Esteban Lorenzano <estebanlm@gmail.com> Jenkins build #14826

Image: Pharo4.0 [Latest update: #40622]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(150@182) mouseUp 1033516 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		doubleClickBlock: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(356253696)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(myBeerTest))))
		removeOnlyLastSelected: 	false


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		event: 	[(150@182) mouseUp 1033516 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(myBeerTest)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(150@182) mouseUp 1033516 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(356253696)
	Receiver's instance variables: 
		timeStamp: 	1033516
		source: 	a HandMorph(760479744)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(150@182)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(356253696)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(90.0@117.0) corner: (298.0@343.0)
		owner: 	a PanelMorph(262930432)
		submorphs: 	an Array(a Morph(635699200) a MorphTreeTransformMorph(795607040))
		fullBounds: 	(90@117) corner: (299@343)
		color: 	Color white
		extension: 	a MorphExtension (842792960) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(398721024)
		scroller: 	a MorphTreeTransformMorph(795607040)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(133169152)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(621805568)
		notExpandedToggleImage: 	an ImageMorph(750518272)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(635699200)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a DynamicClassGroup ( Last Modified Classes...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	139
		enabled: 	true


[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(243@173.0) corner: (259@189.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(243@173.0) corner: (259@189.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(279183360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(243@173) mouseUp 1037060 nil]
		targetOffset: 	(73.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1037060 243 173 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 
		aBlock: 	[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder ha...etc...
		priorWorld: 	a WorldMorph(511705088) [world]
		priorHand: 	a HandMorph(760479744)
		priorEvent: 	[(150@182) mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(523239424) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		bounds: 	(243@173.0) corner: (259@189.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(243@173.0) corner: (259@189.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(279183360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(243@173) mouseUp 1037060 nil]
		targetOffset: 	(73.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1037060 243 173 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		focusHolder: 	a MorphTreeMorph(356253696)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(243@173.0) corner: (259@189.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(243@173.0) corner: (259@189.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(279183360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(243@173) mouseUp 1037060 nil]
		targetOffset: 	(73.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1037060 243 173 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(243@173.0) corner: (259@189.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(243@173.0) corner: (259@189.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(279183360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(243@173) mouseUp 1037060 nil]
		targetOffset: 	(73.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1037060 243 173 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		evt: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(243@173.0) corner: (259@189.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(243@173.0) corner: (259@189.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(279183360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(243@173) mouseUp 1037060 nil]
		targetOffset: 	(73.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1037060 243 173 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(150@182) mouseUp 1033516 nil]
		aHand: 	a HandMorph(760479744)
		localEvt: 	[(150@182) mouseUp 1033516 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(356253696)
		clickState: 	#firstClickUp
		firstClickDown: 	[(150@182) mouseDown red 1033440 nil]
		firstClickUp: 	[(150@182) mouseUp 1033516 nil]
		firstClickTime: 	1033440
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10


HandMorph>>handleEvent:
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		anEvent: 	[(150@182) mouseUp 1033516 nil]
		evt: 	[(150@182) mouseUp 1033516 nil]
	Receiver's instance variables: 
		bounds: 	(243@173.0) corner: (259@189.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(243@173.0) corner: (259@189.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(279183360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(243@173) mouseUp 1037060 nil]
		targetOffset: 	(73.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1037060 243 173 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(760479744)
	Arguments and temporary variables: 
		evt: 	[(150@182) mouseUp 1033516 nil]
		evtBuf: 	#(1 1033516 150 182 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(243@173.0) corner: (259@189.0)
		owner: 	a WorldMorph(511705088) [world]
		submorphs: 	#()
		fullBounds: 	(243@173.0) corner: (259@189.0)
		color: 	Color blue
		extension: 	a MorphExtension (114556928)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(279183360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(243@173) mouseUp 1037060 nil]
		targetOffset: 	(73.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1037060 243 173 0 0 0 1)
		lastKeyScanCode: 	116
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
		h: 	a HandMorph(760479744)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	1037056
		lastStepMessage: 	nil
		lastCycleTime: 	1037076
		alarms: 	a Heap()
		lastAlarmTime: 	1037056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(760479744))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(760479744))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	1037056
		lastStepMessage: 	nil
		lastCycleTime: 	1037076
		alarms: 	a Heap()
		lastAlarmTime: 	1037056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	1037056
		lastStepMessage: 	nil
		lastCycleTime: 	1037076
		alarms: 	a Heap()
		lastAlarmTime: 	1037056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(511705088) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(760479744))
		viewBox: 	(0@0) corner: (959@1022)
		canvas: 	a FormCanvas on: DisplayScreen(959x1022x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(82575360))(a DropListM...etc...
		lastStepTime: 	1037056
		lastStepMessage: 	nil
		lastCycleTime: 	1037076
		alarms: 	a Heap()
		lastAlarmTime: 	1037056
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(511705088) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (959@1022)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SpecWindow(523239424) a Nautilu...etc...
		fullBounds: 	(0@0) corner: (959@1022)
		color: 	(Color r: 0.937 g: 0.937 b: 0.937 alpha: 1.0)
		extension: 	a MorphExtension (552861696) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ 
ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEvents
[ :h | 
ActiveHand := h.
h processEvents.
ActiveHand := nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
[ 
[ 
World doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ 
self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

